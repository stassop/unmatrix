/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_Unmatrix_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/Unmatrix.js */ \"./src/Unmatrix.js\");\n\n\nconst el1 = document.querySelector('#el1');\nconst t1 = _src_Unmatrix_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTransform(el1);\nconst t2 =\n  `translate(${t1.translateX}px,${t1.translateY}px)\n  rotate(${t1.rotate}deg)\n  scale(${t1.scaleX},${t1.scaleY})\n  skew(${t1.skew}deg)`\nconst el2 = document.querySelector('#el2');\n// Apply #el1 transform to #el2\nel2.style.transform = t2;\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./node_modules/sylvester-es6/target/CircularLinkedList.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sylvester-es6/target/CircularLinkedList.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.CircularLinkedList = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _LinkedList2 = __webpack_require__(/*! ./LinkedList */ \"./node_modules/sylvester-es6/target/LinkedList.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar CircularLinkedList = exports.CircularLinkedList = function (_LinkedList) {\n    _inherits(CircularLinkedList, _LinkedList);\n\n    function CircularLinkedList() {\n        _classCallCheck(this, CircularLinkedList);\n\n        return _possibleConstructorReturn(this, Object.getPrototypeOf(CircularLinkedList).apply(this, arguments));\n    }\n\n    _createClass(CircularLinkedList, [{\n        key: \"append\",\n        value: function append(node) {\n            if (this.first === null) {\n                node.prev = node;\n                node.next = node;\n                this.first = node;\n                this.last = node;\n            } else {\n                node.prev = this.last;\n                node.next = this.first;\n                this.first.prev = node;\n                this.last.next = node;\n                this.last = node;\n            }\n            this.length++;\n        }\n    }, {\n        key: \"prepend\",\n        value: function prepend(node) {\n            if (this.first === null) {\n                this.append(node);\n                return;\n            } else {\n                node.prev = this.last;\n                node.next = this.first;\n                this.first.prev = node;\n                this.last.next = node;\n                this.first = node;\n            }\n            this.length++;\n        }\n    }, {\n        key: \"insertAfter\",\n        value: function insertAfter(node, newNode) {\n            newNode.prev = node;\n            newNode.next = node.next;\n            node.next.prev = newNode;\n            node.next = newNode;\n            if (newNode.prev === this.last) {\n                this.last = newNode;\n            }\n            this.length++;\n        }\n    }, {\n        key: \"insertBefore\",\n        value: function insertBefore(node, newNode) {\n            newNode.prev = node.prev;\n            newNode.next = node;\n            node.prev.next = newNode;\n            node.prev = newNode;\n            if (newNode.next === this.first) {\n                this.first = newNode;\n            }\n            this.length++;\n        }\n    }, {\n        key: \"remove\",\n        value: function remove(node) {\n            if (this.length > 1) {\n                node.prev.next = node.next;\n                node.next.prev = node.prev;\n                if (node === this.first) {\n                    this.first = node.next;\n                }\n                if (node === this.last) {\n                    this.last = node.prev;\n                }\n            } else {\n                this.first = null;\n                this.last = null;\n            }\n            node.prev = null;\n            node.next = null;\n            this.length--;\n        }\n    }, {\n        key: \"withData\",\n        value: function withData(data) {\n            var nodeFromStart = this.first,\n                nodeFromEnd = this.last,\n                n = Math.ceil(this.length / 2);\n            while (n--) {\n                if (nodeFromStart.data === data) {\n                    return nodeFromStart;\n                }\n                if (nodeFromEnd.data === data) {\n                    return nodeFromEnd;\n                }\n                nodeFromStart = nodeFromStart.next;\n                nodeFromEnd = nodeFromEnd.prev;\n            }\n            return null;\n        }\n    }]);\n\n    return CircularLinkedList;\n}(_LinkedList2.LinkedList);\n\n;\n\nCircularLinkedList.fromArray = function (list, useNodes) {\n    var linked = new CircularLinkedList();\n    var n = list.length;\n    while (n--) {\n        linked.prepend(useNodes ? new _LinkedList2.LinkedList.Node(list[n]) : list[n]);\n    }\n    return linked;\n};\n//# sourceMappingURL=CircularLinkedList.js.map\n\n\n//# sourceURL=webpack:///./node_modules/sylvester-es6/target/CircularLinkedList.js?");

/***/ }),

/***/ "./node_modules/sylvester-es6/target/Line.js":
/*!***************************************************!*\
  !*** ./node_modules/sylvester-es6/target/Line.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Line = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _PRECISION = __webpack_require__(/*! ./PRECISION */ \"./node_modules/sylvester-es6/target/PRECISION.js\");\n\nvar _Vector = __webpack_require__(/*! ./Vector */ \"./node_modules/sylvester-es6/target/Vector.js\");\n\nvar _Matrix = __webpack_require__(/*! ./Matrix */ \"./node_modules/sylvester-es6/target/Matrix.js\");\n\nvar _Plane = __webpack_require__(/*! ./Plane */ \"./node_modules/sylvester-es6/target/Plane.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Line = exports.Line = function () {\n    function Line(anchor, direction) {\n        _classCallCheck(this, Line);\n\n        this.setVectors(anchor, direction);\n    }\n\n    _createClass(Line, [{\n        key: \"eql\",\n        value: function eql(line) {\n            return this.isParallelTo(line) && this.contains(line.anchor);\n        }\n    }, {\n        key: \"dup\",\n        value: function dup() {\n            return new Line(this.anchor, this.direction);\n        }\n    }, {\n        key: \"translate\",\n        value: function translate(vector) {\n            var V = vector.elements || vector;\n            return new Line([this.anchor.elements[0] + V[0], this.anchor.elements[1] + V[1], this.anchor.elements[2] + (V[2] || 0)], this.direction);\n        }\n    }, {\n        key: \"isParallelTo\",\n        value: function isParallelTo(obj) {\n            if (obj.normal || obj.start && obj.end) {\n                return obj.isParallelTo(this);\n            }\n            var theta = this.direction.angleFrom(obj.direction);\n            return Math.abs(theta) <= _PRECISION.PRECISION || Math.abs(theta - Math.PI) <= _PRECISION.PRECISION;\n        }\n    }, {\n        key: \"distanceFrom\",\n        value: function distanceFrom(obj) {\n            if (obj.normal || obj.start && obj.end) {\n                return obj.distanceFrom(this);\n            }\n            if (obj.direction) {\n                // obj is a line\n                if (this.isParallelTo(obj)) {\n                    return this.distanceFrom(obj.anchor);\n                }\n                var N = this.direction.cross(obj.direction).toUnitVector().elements;\n                var A = this.anchor.elements,\n                    B = obj.anchor.elements;\n                return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);\n            } else {\n                // obj is a point\n                var P = obj.elements || obj;\n                var A = this.anchor.elements,\n                    D = this.direction.elements;\n                var PA1 = P[0] - A[0],\n                    PA2 = P[1] - A[1],\n                    PA3 = (P[2] || 0) - A[2];\n                var modPA = Math.sqrt(PA1 * PA1 + PA2 * PA2 + PA3 * PA3);\n                if (modPA === 0) {\n                    return 0;\n                }\n                // Assumes direction vector is normalized\n                var cosTheta = (PA1 * D[0] + PA2 * D[1] + PA3 * D[2]) / modPA;\n                var sin2 = 1 - cosTheta * cosTheta;\n                return Math.abs(modPA * Math.sqrt(sin2 < 0 ? 0 : sin2));\n            }\n        }\n    }, {\n        key: \"contains\",\n        value: function contains(obj) {\n            if (obj.start && obj.end) {\n                return this.contains(obj.start) && this.contains(obj.end);\n            }\n            var dist = this.distanceFrom(obj);\n            return dist !== null && dist <= _PRECISION.PRECISION;\n        }\n    }, {\n        key: \"positionOf\",\n        value: function positionOf(point) {\n            if (!this.contains(point)) {\n                return null;\n            }\n            var P = point.elements || point;\n            var A = this.anchor.elements,\n                D = this.direction.elements;\n            return (P[0] - A[0]) * D[0] + (P[1] - A[1]) * D[1] + ((P[2] || 0) - A[2]) * D[2];\n        }\n    }, {\n        key: \"liesIn\",\n        value: function liesIn(plane) {\n            return plane.contains(this);\n        }\n    }, {\n        key: \"intersects\",\n        value: function intersects(obj) {\n            if (obj.normal) {\n                return obj.intersects(this);\n            }\n            return !this.isParallelTo(obj) && this.distanceFrom(obj) <= _PRECISION.PRECISION;\n        }\n    }, {\n        key: \"intersectionWith\",\n        value: function intersectionWith(obj) {\n            if (obj.normal || obj.start && obj.end) {\n                return obj.intersectionWith(this);\n            }\n            if (!this.intersects(obj)) {\n                return null;\n            }\n            var P = this.anchor.elements,\n                X = this.direction.elements,\n                Q = obj.anchor.elements,\n                Y = obj.direction.elements;\n            var X1 = X[0],\n                X2 = X[1],\n                X3 = X[2],\n                Y1 = Y[0],\n                Y2 = Y[1],\n                Y3 = Y[2];\n            var PsubQ1 = P[0] - Q[0],\n                PsubQ2 = P[1] - Q[1],\n                PsubQ3 = P[2] - Q[2];\n            var XdotQsubP = -X1 * PsubQ1 - X2 * PsubQ2 - X3 * PsubQ3;\n            var YdotPsubQ = Y1 * PsubQ1 + Y2 * PsubQ2 + Y3 * PsubQ3;\n            var XdotX = X1 * X1 + X2 * X2 + X3 * X3;\n            var YdotY = Y1 * Y1 + Y2 * Y2 + Y3 * Y3;\n            var XdotY = X1 * Y1 + X2 * Y2 + X3 * Y3;\n            var k = (XdotQsubP * YdotY / XdotX + XdotY * YdotPsubQ) / (YdotY - XdotY * XdotY);\n            return new _Vector.Vector([P[0] + k * X1, P[1] + k * X2, P[2] + k * X3]);\n        }\n    }, {\n        key: \"pointClosestTo\",\n        value: function pointClosestTo(obj) {\n            if (obj.start && obj.end) {\n                // obj is a line segment\n                var P = obj.pointClosestTo(this);\n                return P === null ? null : this.pointClosestTo(P);\n            } else if (obj.direction) {\n                // obj is a line\n                if (this.intersects(obj)) {\n                    return this.intersectionWith(obj);\n                }\n                if (this.isParallelTo(obj)) {\n                    return null;\n                }\n                var D = this.direction.elements,\n                    E = obj.direction.elements;\n                var D1 = D[0],\n                    D2 = D[1],\n                    D3 = D[2],\n                    E1 = E[0],\n                    E2 = E[1],\n                    E3 = E[2];\n                // Create plane containing obj and the shared normal and intersect this\n                // with it Thank you:\n                // http://www.cgafaq.info/wiki/Line-line_distance\n                var x = D3 * E1 - D1 * E3,\n                    y = D1 * E2 - D2 * E1,\n                    z = D2 * E3 - D3 * E2;\n                var N = [x * E3 - y * E2, y * E1 - z * E3, z * E2 - x * E1];\n                var P = new _Plane.Plane(obj.anchor, N);\n                return P.intersectionWith(this);\n            } else {\n                // obj is a point\n                var P = obj.elements || obj;\n                if (this.contains(P)) {\n                    return new _Vector.Vector(P);\n                }\n                var A = this.anchor.elements,\n                    D = this.direction.elements;\n                var D1 = D[0],\n                    D2 = D[1],\n                    D3 = D[2],\n                    A1 = A[0],\n                    A2 = A[1],\n                    A3 = A[2];\n                var x = D1 * (P[1] - A2) - D2 * (P[0] - A1),\n                    y = D2 * ((P[2] || 0) - A3) - D3 * (P[1] - A2),\n                    z = D3 * (P[0] - A1) - D1 * ((P[2] || 0) - A3);\n                var V = new _Vector.Vector([D2 * x - D3 * z, D3 * y - D1 * x, D1 * z - D2 * y]);\n                var k = this.distanceFrom(P) / V.modulus();\n                return new _Vector.Vector([P[0] + V.elements[0] * k, P[1] + V.elements[1] * k, (P[2] || 0) + V.elements[2] * k]);\n            }\n        }\n\n        // Returns a copy of the line rotated by t radians about the given line. Works\n        // by finding the argument's closest point to this line's anchor point (call\n        // this C) and rotating the anchor about C. Also rotates the line's direction\n        // about the argument's. Be careful with this - the rotation axis' direction\n        // affects the outcome!\n\n    }, {\n        key: \"rotate\",\n        value: function rotate(t, line) {\n            // If we're working in 2D\n            if (typeof line.direction === 'undefined') {\n                line = new Line(line.to3D(), _Vector.Vector.k);\n            }\n            var R = _Matrix.Matrix.Rotation(t, line.direction).elements;\n            var C = line.pointClosestTo(this.anchor).elements;\n            var A = this.anchor.elements,\n                D = this.direction.elements;\n            var C1 = C[0],\n                C2 = C[1],\n                C3 = C[2],\n                A1 = A[0],\n                A2 = A[1],\n                A3 = A[2];\n            var x = A1 - C1,\n                y = A2 - C2,\n                z = A3 - C3;\n            return new Line([C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z, C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z, C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z], [R[0][0] * D[0] + R[0][1] * D[1] + R[0][2] * D[2], R[1][0] * D[0] + R[1][1] * D[1] + R[1][2] * D[2], R[2][0] * D[0] + R[2][1] * D[1] + R[2][2] * D[2]]);\n        }\n    }, {\n        key: \"reverse\",\n        value: function reverse() {\n            return new Line(this.anchor, this.direction.x(-1));\n        }\n    }, {\n        key: \"reflectionIn\",\n        value: function reflectionIn(obj) {\n            if (obj.normal) {\n                // obj is a plane\n                var A = this.anchor.elements,\n                    D = this.direction.elements;\n                var A1 = A[0],\n                    A2 = A[1],\n                    A3 = A[2],\n                    D1 = D[0],\n                    D2 = D[1],\n                    D3 = D[2];\n                var newA = this.anchor.reflectionIn(obj).elements;\n                // Add the line's direction vector to its anchor, then mirror that in the plane\n                var AD1 = A1 + D1,\n                    AD2 = A2 + D2,\n                    AD3 = A3 + D3;\n                var Q = obj.pointClosestTo([AD1, AD2, AD3]).elements;\n                var newD = [Q[0] + (Q[0] - AD1) - newA[0], Q[1] + (Q[1] - AD2) - newA[1], Q[2] + (Q[2] - AD3) - newA[2]];\n                return new Line(newA, newD);\n            } else if (obj.direction) {\n                // obj is a line - reflection obtained by rotating PI radians about obj\n                return this.rotate(Math.PI, obj);\n            } else {\n                // obj is a point - just reflect the line's anchor in it\n                var P = obj.elements || obj;\n                return new Line(this.anchor.reflectionIn([P[0], P[1], P[2] || 0]), this.direction);\n            }\n        }\n    }, {\n        key: \"setVectors\",\n        value: function setVectors(anchor, direction) {\n            // Need to do this so that line's properties are not references to the\n            // arguments passed in\n            anchor = new _Vector.Vector(anchor);\n            direction = new _Vector.Vector(direction);\n            if (anchor.elements.length === 2) {\n                anchor.elements.push(0);\n            }\n            if (direction.elements.length === 2) {\n                direction.elements.push(0);\n            }\n            if (anchor.elements.length > 3 || direction.elements.length > 3) {\n                return null;\n            }\n            var mod = direction.modulus();\n            if (mod === 0) {\n                return null;\n            }\n            this.anchor = anchor;\n            this.direction = new _Vector.Vector([direction.elements[0] / mod, direction.elements[1] / mod, direction.elements[2] / mod]);\n            return this;\n        }\n    }]);\n\n    return Line;\n}();\n\nLine.X = new Line(_Vector.Vector.Zero(3), _Vector.Vector.i);\nLine.Y = new Line(_Vector.Vector.Zero(3), _Vector.Vector.j);\nLine.Z = new Line(_Vector.Vector.Zero(3), _Vector.Vector.k);\n//# sourceMappingURL=Line.js.map\n\n\n//# sourceURL=webpack:///./node_modules/sylvester-es6/target/Line.js?");

/***/ }),

/***/ "./node_modules/sylvester-es6/target/LineSegment.js":
/*!**********************************************************!*\
  !*** ./node_modules/sylvester-es6/target/LineSegment.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.LineSegment = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Vector = __webpack_require__(/*! ./Vector */ \"./node_modules/sylvester-es6/target/Vector.js\");\n\nvar _Plane = __webpack_require__(/*! ./Plane */ \"./node_modules/sylvester-es6/target/Plane.js\");\n\nvar _Line = __webpack_require__(/*! ./Line */ \"./node_modules/sylvester-es6/target/Line.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LineSegment = exports.LineSegment = function () {\n    function LineSegment(v1, v2) {\n        _classCallCheck(this, LineSegment);\n\n        this.setPoints(v1, v2);\n    }\n\n    _createClass(LineSegment, [{\n        key: \"eql\",\n        value: function eql(segment) {\n            return this.start.eql(segment.start) && this.end.eql(segment.end) || this.start.eql(segment.end) && this.end.eql(segment.start);\n        }\n    }, {\n        key: \"dup\",\n        value: function dup() {\n            return new LineSegment(this.start, this.end);\n        }\n    }, {\n        key: \"length\",\n        value: function length() {\n            var A = this.start.elements,\n                B = this.end.elements;\n            var C1 = B[0] - A[0],\n                C2 = B[1] - A[1],\n                C3 = B[2] - A[2];\n            return Math.sqrt(C1 * C1 + C2 * C2 + C3 * C3);\n        }\n    }, {\n        key: \"toVector\",\n        value: function toVector() {\n            var A = this.start.elements,\n                B = this.end.elements;\n            return new _Vector.Vector([B[0] - A[0], B[1] - A[1], B[2] - A[2]]);\n        }\n    }, {\n        key: \"midpoint\",\n        value: function midpoint() {\n            var A = this.start.elements,\n                B = this.end.elements;\n            return new _Vector.Vector([(B[0] + A[0]) / 2, (B[1] + A[1]) / 2, (B[2] + A[2]) / 2]);\n        }\n    }, {\n        key: \"bisectingPlane\",\n        value: function bisectingPlane() {\n            return new _Plane.Plane(this.midpoint(), this.toVector());\n        }\n    }, {\n        key: \"translate\",\n        value: function translate(vector) {\n            var V = vector.elements || vector;\n            var S = this.start.elements,\n                E = this.end.elements;\n            return new LineSegment([S[0] + V[0], S[1] + V[1], S[2] + (V[2] || 0)], [E[0] + V[0], E[1] + V[1], E[2] + (V[2] || 0)]);\n        }\n    }, {\n        key: \"isParallelTo\",\n        value: function isParallelTo(obj) {\n            return this.line.isParallelTo(obj);\n        }\n    }, {\n        key: \"distanceFrom\",\n        value: function distanceFrom(obj) {\n            var P = this.pointClosestTo(obj);\n            return P === null ? null : P.distanceFrom(obj);\n        }\n    }, {\n        key: \"contains\",\n        value: function contains(obj) {\n            if (obj.start && obj.end) {\n                return this.contains(obj.start) && this.contains(obj.end);\n            }\n            var P = (obj.elements || obj).slice();\n            if (P.length === 2) {\n                P.push(0);\n            }\n            if (this.start.eql(P)) {\n                return true;\n            }\n            var S = this.start.elements;\n            var V = new _Vector.Vector([S[0] - P[0], S[1] - P[1], S[2] - (P[2] || 0)]);\n            var vect = this.toVector();\n            return V.isAntiparallelTo(vect) && V.modulus() <= vect.modulus();\n        }\n    }, {\n        key: \"intersects\",\n        value: function intersects(obj) {\n            return this.intersectionWith(obj) !== null;\n        }\n    }, {\n        key: \"intersectionWith\",\n        value: function intersectionWith(obj) {\n            if (!this.line.intersects(obj)) {\n                return null;\n            }\n            var P = this.line.intersectionWith(obj);\n            return this.contains(P) ? P : null;\n        }\n    }, {\n        key: \"pointClosestTo\",\n        value: function pointClosestTo(obj) {\n            if (obj.normal) {\n                // obj is a plane\n                var V = this.line.intersectionWith(obj);\n                if (V === null) {\n                    return null;\n                }\n                return this.pointClosestTo(V);\n            } else {\n                // obj is a line (segment) or point\n                var P = this.line.pointClosestTo(obj);\n                if (P === null) {\n                    return null;\n                }\n                if (this.contains(P)) {\n                    return P;\n                }\n                return (this.line.positionOf(P) < 0 ? this.start : this.end).dup();\n            }\n        }\n    }, {\n        key: \"setPoints\",\n        value: function setPoints(startPoint, endPoint) {\n            startPoint = new _Vector.Vector(startPoint).to3D();\n            endPoint = new _Vector.Vector(endPoint).to3D();\n            if (startPoint === null || endPoint === null) {\n                return null;\n            }\n            this.line = new _Line.Line(startPoint, endPoint.subtract(startPoint));\n            this.start = startPoint;\n            this.end = endPoint;\n            return this;\n        }\n    }]);\n\n    return LineSegment;\n}();\n//# sourceMappingURL=LineSegment.js.map\n\n\n//# sourceURL=webpack:///./node_modules/sylvester-es6/target/LineSegment.js?");

/***/ }),

/***/ "./node_modules/sylvester-es6/target/LinkedList.js":
/*!*********************************************************!*\
  !*** ./node_modules/sylvester-es6/target/LinkedList.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LinkedList = exports.LinkedList = function () {\n    function LinkedList() {\n        _classCallCheck(this, LinkedList);\n\n        this.length = 0;\n        this.first = null;\n        this.last = null;\n    }\n\n    _createClass(LinkedList, [{\n        key: \"forEach\",\n        value: function forEach(fn, context) {\n            var node = this.first,\n                n = this.length;\n            for (var i = 0; i < n; i++) {\n                fn.call(context, node, i);\n                node = node.next;\n            }\n        }\n    }, {\n        key: \"at\",\n        value: function at(i) {\n            if (!(i >= 0 && i < this.length)) {\n                return null;\n            }\n            var node = this.first;\n            while (i--) {\n                node = node.next;\n            }\n            return node;\n        }\n    }, {\n        key: \"randomNode\",\n        value: function randomNode() {\n            var n = Math.floor(Math.random() * this.length);\n            return this.at(n);\n        }\n    }, {\n        key: \"toArray\",\n        value: function toArray() {\n            var arr = [],\n                node = this.first,\n                n = this.length;\n            while (n--) {\n                arr.push(node.data || node);\n                node = node.next;\n            }\n            return arr;\n        }\n    }]);\n\n    return LinkedList;\n}();\n\nLinkedList.prototype.each = LinkedList.prototype.forEach;\n//# sourceMappingURL=LinkedList.js.map\n\n\n//# sourceURL=webpack:///./node_modules/sylvester-es6/target/LinkedList.js?");

/***/ }),

/***/ "./node_modules/sylvester-es6/target/LinkedListNode.js":
/*!*************************************************************!*\
  !*** ./node_modules/sylvester-es6/target/LinkedListNode.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LinkedListNode = exports.LinkedListNode = function LinkedListNode(data) {\n    _classCallCheck(this, LinkedListNode);\n\n    this.prev = null;\n    this.next = null;\n    this.data = data;\n};\n//# sourceMappingURL=LinkedListNode.js.map\n\n\n//# sourceURL=webpack:///./node_modules/sylvester-es6/target/LinkedListNode.js?");

/***/ }),

/***/ "./node_modules/sylvester-es6/target/Matrix.js":
/*!*****************************************************!*\
  !*** ./node_modules/sylvester-es6/target/Matrix.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Matrix = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _PRECISION = __webpack_require__(/*! ./PRECISION */ \"./node_modules/sylvester-es6/target/PRECISION.js\");\n\nvar _Vector = __webpack_require__(/*! ./Vector */ \"./node_modules/sylvester-es6/target/Vector.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Matrix = exports.Matrix = function () {\n    function Matrix(elements) {\n        _classCallCheck(this, Matrix);\n\n        this.setElements(elements);\n    }\n\n    _createClass(Matrix, [{\n        key: \"e\",\n        value: function e(i, j) {\n            if (i < 1 || i > this.elements.length || j < 1 || j > this.elements[0].length) {\n                return null;\n            }\n            return this.elements[i - 1][j - 1];\n        }\n    }, {\n        key: \"row\",\n        value: function row(i) {\n            if (i > this.elements.length) {\n                return null;\n            }\n            return new _Vector.Vector(this.elements[i - 1]);\n        }\n    }, {\n        key: \"col\",\n        value: function col(j) {\n            if (this.elements.length === 0) {\n                return null;\n            }\n            if (j > this.elements[0].length) {\n                return null;\n            }\n            var col = [],\n                n = this.elements.length;\n            for (var i = 0; i < n; i++) {\n                col.push(this.elements[i][j - 1]);\n            }\n            return new _Vector.Vector(col);\n        }\n    }, {\n        key: \"dimensions\",\n        value: function dimensions() {\n            var cols = this.elements.length === 0 ? 0 : this.elements[0].length;\n            return { rows: this.elements.length, cols: cols };\n        }\n    }, {\n        key: \"rows\",\n        value: function rows() {\n            return this.elements.length;\n        }\n    }, {\n        key: \"cols\",\n        value: function cols() {\n            if (this.elements.length === 0) {\n                return 0;\n            }\n            return this.elements[0].length;\n        }\n    }, {\n        key: \"eql\",\n        value: function eql(matrix) {\n            var M = matrix.elements || matrix;\n            if (!M[0] || typeof M[0][0] === 'undefined') {\n                M = new Matrix(M).elements;\n            }\n            if (this.elements.length === 0 || M.length === 0) {\n                return this.elements.length === M.length;\n            }\n            if (this.elements.length !== M.length) {\n                return false;\n            }\n            if (this.elements[0].length !== M[0].length) {\n                return false;\n            }\n            var i = this.elements.length,\n                nj = this.elements[0].length,\n                j;\n            while (i--) {\n                j = nj;\n                while (j--) {\n                    if (Math.abs(this.elements[i][j] - M[i][j]) > _PRECISION.PRECISION) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n    }, {\n        key: \"dup\",\n        value: function dup() {\n            return new Matrix(this.elements);\n        }\n    }, {\n        key: \"map\",\n        value: function map(fn, context) {\n            if (this.elements.length === 0) {\n                return new Matrix([]);\n            }\n            var els = [],\n                i = this.elements.length,\n                nj = this.elements[0].length,\n                j;\n            while (i--) {\n                j = nj;\n                els[i] = [];\n                while (j--) {\n                    els[i][j] = fn.call(context, this.elements[i][j], i + 1, j + 1);\n                }\n            }\n            return new Matrix(els);\n        }\n    }, {\n        key: \"isSameSizeAs\",\n        value: function isSameSizeAs(matrix) {\n            var M = matrix.elements || matrix;\n            if (typeof M[0][0] === 'undefined') {\n                M = new Matrix(M).elements;\n            }\n            if (this.elements.length === 0) {\n                return M.length === 0;\n            }\n            return this.elements.length === M.length && this.elements[0].length === M[0].length;\n        }\n    }, {\n        key: \"add\",\n        value: function add(matrix) {\n            if (this.elements.length === 0) {\n                return this.map(function (x) {\n                    return x;\n                });\n            }\n            var M = matrix.elements || matrix;\n            if (typeof M[0][0] === 'undefined') {\n                M = new Matrix(M).elements;\n            }\n            if (!this.isSameSizeAs(M)) {\n                return null;\n            }\n            return this.map(function (x, i, j) {\n                return x + M[i - 1][j - 1];\n            });\n        }\n    }, {\n        key: \"subtract\",\n        value: function subtract(matrix) {\n            if (this.elements.length === 0) {\n                return this.map(function (x) {\n                    return x;\n                });\n            }\n            var M = matrix.elements || matrix;\n            if (typeof M[0][0] === 'undefined') {\n                M = new Matrix(M).elements;\n            }\n            if (!this.isSameSizeAs(M)) {\n                return null;\n            }\n            return this.map(function (x, i, j) {\n                return x - M[i - 1][j - 1];\n            });\n        }\n    }, {\n        key: \"canMultiplyFromLeft\",\n        value: function canMultiplyFromLeft(matrix) {\n            if (this.elements.length === 0) {\n                return false;\n            }\n            var M = matrix.elements || matrix;\n            if (typeof M[0][0] === 'undefined') {\n                M = new Matrix(M).elements;\n            }\n            // this.columns should equal matrix.rows\n            return this.elements[0].length === M.length;\n        }\n    }, {\n        key: \"multiply\",\n        value: function multiply(matrix) {\n            if (this.elements.length === 0) {\n                return null;\n            }\n            if (!matrix.elements) {\n                return this.map(function (x) {\n                    return x * matrix;\n                });\n            }\n            var returnVector = matrix.modulus ? true : false;\n            var M = matrix.elements || matrix;\n            if (typeof M[0][0] === 'undefined') {\n                M = new Matrix(M).elements;\n            }\n            if (!this.canMultiplyFromLeft(M)) {\n                return null;\n            }\n            var i = this.elements.length,\n                nj = M[0].length,\n                j;\n            var cols = this.elements[0].length,\n                c,\n                elements = [],\n                sum;\n            while (i--) {\n                j = nj;\n                elements[i] = [];\n                while (j--) {\n                    c = cols;\n                    sum = 0;\n                    while (c--) {\n                        sum += this.elements[i][c] * M[c][j];\n                    }\n                    elements[i][j] = sum;\n                }\n            }\n            var M = new Matrix(elements);\n            return returnVector ? M.col(1) : M;\n        }\n    }, {\n        key: \"minor\",\n        value: function minor(a, b, c, d) {\n            if (this.elements.length === 0) {\n                return null;\n            }\n            var elements = [],\n                ni = c,\n                i,\n                nj,\n                j;\n            var rows = this.elements.length,\n                cols = this.elements[0].length;\n            while (ni--) {\n                i = c - ni - 1;\n                elements[i] = [];\n                nj = d;\n                while (nj--) {\n                    j = d - nj - 1;\n                    elements[i][j] = this.elements[(a + i - 1) % rows][(b + j - 1) % cols];\n                }\n            }\n            return new Matrix(elements);\n        }\n    }, {\n        key: \"transpose\",\n        value: function transpose() {\n            if (this.elements.length === 0) {\n                return new Matrix([]);\n            }\n            var rows = this.elements.length,\n                i,\n                cols = this.elements[0].length,\n                j;\n            var elements = [],\n                i = cols;\n            while (i--) {\n                j = rows;\n                elements[i] = [];\n                while (j--) {\n                    elements[i][j] = this.elements[j][i];\n                }\n            }\n            return new Matrix(elements);\n        }\n    }, {\n        key: \"isSquare\",\n        value: function isSquare() {\n            var cols = this.elements.length === 0 ? 0 : this.elements[0].length;\n            return this.elements.length === cols;\n        }\n    }, {\n        key: \"max\",\n        value: function max() {\n            if (this.elements.length === 0) {\n                return null;\n            }\n            var m = 0,\n                i = this.elements.length,\n                nj = this.elements[0].length,\n                j;\n            while (i--) {\n                j = nj;\n                while (j--) {\n                    if (Math.abs(this.elements[i][j]) > Math.abs(m)) {\n                        m = this.elements[i][j];\n                    }\n                }\n            }\n            return m;\n        }\n    }, {\n        key: \"indexOf\",\n        value: function indexOf(x) {\n            if (this.elements.length === 0) {\n                return null;\n            }\n            var index = null,\n                ni = this.elements.length,\n                i,\n                nj = this.elements[0].length,\n                j;\n            for (i = 0; i < ni; i++) {\n                for (j = 0; j < nj; j++) {\n                    if (this.elements[i][j] === x) {\n                        return {\n                            i: i + 1,\n                            j: j + 1\n                        };\n                    }\n                }\n            }\n            return null;\n        }\n    }, {\n        key: \"diagonal\",\n        value: function diagonal() {\n            if (!this.isSquare) {\n                return null;\n            }\n            var els = [],\n                n = this.elements.length;\n            for (var i = 0; i < n; i++) {\n                els.push(this.elements[i][i]);\n            }\n            return new _Vector.Vector(els);\n        }\n    }, {\n        key: \"toRightTriangular\",\n        value: function toRightTriangular() {\n            if (this.elements.length === 0) {\n                return new Matrix([]);\n            }\n            var M = this.dup(),\n                els;\n            var n = this.elements.length,\n                i,\n                j,\n                np = this.elements[0].length,\n                p;\n            for (i = 0; i < n; i++) {\n                if (M.elements[i][i] === 0) {\n                    for (j = i + 1; j < n; j++) {\n                        if (M.elements[j][i] !== 0) {\n                            els = [];\n                            for (p = 0; p < np; p++) {\n                                els.push(M.elements[i][p] + M.elements[j][p]);\n                            }\n                            M.elements[i] = els;\n                            break;\n                        }\n                    }\n                }\n                if (M.elements[i][i] !== 0) {\n                    for (j = i + 1; j < n; j++) {\n                        var multiplier = M.elements[j][i] / M.elements[i][i];\n                        els = [];\n                        for (p = 0; p < np; p++) {\n                            // Elements with column numbers up to an including the number of the\n                            // row that we're subtracting can safely be set straight to zero,\n                            // since that's the point of this routine and it avoids having to\n                            // loop over and correct rounding errors later\n                            els.push(p <= i ? 0 : M.elements[j][p] - M.elements[i][p] * multiplier);\n                        }\n                        M.elements[j] = els;\n                    }\n                }\n            }\n            return M;\n        }\n    }, {\n        key: \"determinant\",\n        value: function determinant() {\n            if (this.elements.length === 0) {\n                return 1;\n            }\n            if (!this.isSquare()) {\n                return null;\n            }\n            var M = this.toRightTriangular();\n            var det = M.elements[0][0],\n                n = M.elements.length;\n            for (var i = 1; i < n; i++) {\n                det = det * M.elements[i][i];\n            }\n            return det;\n        }\n    }, {\n        key: \"isSingular\",\n        value: function isSingular() {\n            return this.isSquare() && this.determinant() === 0;\n        }\n    }, {\n        key: \"trace\",\n        value: function trace() {\n            if (this.elements.length === 0) {\n                return 0;\n            }\n            if (!this.isSquare()) {\n                return null;\n            }\n            var tr = this.elements[0][0],\n                n = this.elements.length;\n            for (var i = 1; i < n; i++) {\n                tr += this.elements[i][i];\n            }\n            return tr;\n        }\n    }, {\n        key: \"rank\",\n        value: function rank() {\n            if (this.elements.length === 0) {\n                return 0;\n            }\n            var M = this.toRightTriangular(),\n                rank = 0;\n            var i = this.elements.length,\n                nj = this.elements[0].length,\n                j;\n            while (i--) {\n                j = nj;\n                while (j--) {\n                    if (Math.abs(M.elements[i][j]) > _PRECISION.PRECISION) {\n                        rank++;\n                        break;\n                    }\n                }\n            }\n            return rank;\n        }\n    }, {\n        key: \"augment\",\n        value: function augment(matrix) {\n            if (this.elements.length === 0) {\n                return this.dup();\n            }\n            var M = matrix.elements || matrix;\n            if (typeof M[0][0] === 'undefined') {\n                M = new Matrix(M).elements;\n            }\n            var T = this.dup(),\n                cols = T.elements[0].length;\n            var i = T.elements.length,\n                nj = M[0].length,\n                j;\n            if (i !== M.length) {\n                return null;\n            }\n            while (i--) {\n                j = nj;\n                while (j--) {\n                    T.elements[i][cols + j] = M[i][j];\n                }\n            }\n            return T;\n        }\n    }, {\n        key: \"inverse\",\n        value: function inverse() {\n            if (this.elements.length === 0) {\n                return null;\n            }\n            if (!this.isSquare() || this.isSingular()) {\n                return null;\n            }\n            var n = this.elements.length,\n                i = n,\n                j;\n            var M = this.augment(Matrix.I(n)).toRightTriangular();\n            var np = M.elements[0].length,\n                p,\n                els,\n                divisor;\n            var inverse_elements = [],\n                new_element;\n            // Matrix is non-singular so there will be no zeros on the\n            // diagonal. Cycle through rows from last to first.\n            while (i--) {\n                // First, normalise diagonal elements to 1\n                els = [];\n                inverse_elements[i] = [];\n                divisor = M.elements[i][i];\n                for (p = 0; p < np; p++) {\n                    new_element = M.elements[i][p] / divisor;\n                    els.push(new_element);\n                    // Shuffle off the current row of the right hand side into the results\n                    // array as it will not be modified by later runs through this loop\n                    if (p >= n) {\n                        inverse_elements[i].push(new_element);\n                    }\n                }\n                M.elements[i] = els;\n                // Then, subtract this row from those above it to give the identity matrix\n                // on the left hand side\n                j = i;\n                while (j--) {\n                    els = [];\n                    for (p = 0; p < np; p++) {\n                        els.push(M.elements[j][p] - M.elements[i][p] * M.elements[j][i]);\n                    }\n                    M.elements[j] = els;\n                }\n            }\n            return new Matrix(inverse_elements);\n        }\n    }, {\n        key: \"round\",\n        value: function round() {\n            return this.map(function (x) {\n                return Math.round(x);\n            });\n        }\n    }, {\n        key: \"snapTo\",\n        value: function snapTo(x) {\n            return this.map(function (p) {\n                return Math.abs(p - x) <= _PRECISION.PRECISION ? x : p;\n            });\n        }\n    }, {\n        key: \"inspect\",\n        value: function inspect() {\n            var matrix_rows = [];\n            var n = this.elements.length;\n            if (n === 0) return '[]';\n            for (var i = 0; i < n; i++) {\n                matrix_rows.push(new _Vector.Vector(this.elements[i]).inspect());\n            }\n            return matrix_rows.join('\\n');\n        }\n    }, {\n        key: \"setElements\",\n        value: function setElements(els) {\n            var i,\n                j,\n                elements = els.elements || els;\n            if (elements[0] && typeof elements[0][0] !== 'undefined') {\n                i = elements.length;\n                this.elements = [];\n                while (i--) {\n                    j = elements[i].length;\n                    this.elements[i] = [];\n                    while (j--) {\n                        this.elements[i][j] = elements[i][j];\n                    }\n                }\n                return this;\n            }\n            var n = elements.length;\n            this.elements = [];\n            for (i = 0; i < n; i++) {\n                this.elements.push([elements[i]]);\n            }\n            return this;\n        }\n\n        //From glUtils.js\n\n    }, {\n        key: \"flatten\",\n        value: function flatten() {\n            var result = [];\n            if (this.elements.length == 0) {\n                return [];\n            }\n\n            for (var j = 0; j < this.elements[0].length; j++) {\n                for (var i = 0; i < this.elements.length; i++) {\n                    result.push(this.elements[i][j]);\n                }\n            }\n            return result;\n        }\n\n        //From glUtils.js\n\n    }, {\n        key: \"ensure4x4\",\n        value: function ensure4x4() {\n            if (this.elements.length == 4 && this.elements[0].length == 4) {\n                return this;\n            }\n\n            if (this.elements.length > 4 || this.elements[0].length > 4) {\n                return null;\n            }\n\n            for (var i = 0; i < this.elements.length; i++) {\n                for (var j = this.elements[i].length; j < 4; j++) {\n                    if (i == j) {\n                        this.elements[i].push(1);\n                    } else {\n                        this.elements[i].push(0);\n                    }\n                }\n            }\n\n            for (var i = this.elements.length; i < 4; i++) {\n                if (i == 0) {\n                    this.elements.push([1, 0, 0, 0]);\n                } else if (i == 1) {\n                    this.elements.push([0, 1, 0, 0]);\n                } else if (i == 2) {\n                    this.elements.push([0, 0, 1, 0]);\n                } else if (i == 3) {\n                    this.elements.push([0, 0, 0, 1]);\n                }\n            }\n\n            return this;\n        }\n\n        //From glUtils.js\n\n    }, {\n        key: \"make3x3\",\n        value: function make3x3() {\n            if (this.elements.length != 4 || this.elements[0].length != 4) {\n                return null;\n            }\n\n            return new Matrix([[this.elements[0][0], this.elements[0][1], this.elements[0][2]], [this.elements[1][0], this.elements[1][1], this.elements[1][2]], [this.elements[2][0], this.elements[2][1], this.elements[2][2]]]);\n        }\n    }]);\n\n    return Matrix;\n}();\n\nMatrix.I = function (n) {\n    var els = [],\n        i = n,\n        j;\n    while (i--) {\n        j = n;\n        els[i] = [];\n        while (j--) {\n            els[i][j] = i === j ? 1 : 0;\n        }\n    }\n    return new Matrix(els);\n};\n\nMatrix.Diagonal = function (elements) {\n    var i = elements.length;\n    var M = Matrix.I(i);\n    while (i--) {\n        M.elements[i][i] = elements[i];\n    }\n    return M;\n};\n\nMatrix.Rotation = function (theta, a) {\n    if (!a) {\n        return new Matrix([[Math.cos(theta), -Math.sin(theta)], [Math.sin(theta), Math.cos(theta)]]);\n    }\n    var axis = a.dup();\n    if (axis.elements.length !== 3) {\n        return null;\n    }\n    var mod = axis.modulus();\n    var x = axis.elements[0] / mod,\n        y = axis.elements[1] / mod,\n        z = axis.elements[2] / mod;\n    var s = Math.sin(theta),\n        c = Math.cos(theta),\n        t = 1 - c;\n    // Formula derived here: http://www.gamedev.net/reference/articles/article1199.asp\n    // That proof rotates the co-ordinate system so theta becomes -theta and sin\n    // becomes -sin here.\n    return new Matrix([[t * x * x + c, t * x * y - s * z, t * x * z + s * y], [t * x * y + s * z, t * y * y + c, t * y * z - s * x], [t * x * z - s * y, t * y * z + s * x, t * z * z + c]]);\n};\n\nMatrix.RotationX = function (t) {\n    var c = Math.cos(t),\n        s = Math.sin(t);\n    return new Matrix([[1, 0, 0], [0, c, -s], [0, s, c]]);\n};\nMatrix.RotationY = function (t) {\n    var c = Math.cos(t),\n        s = Math.sin(t);\n    return new Matrix([[c, 0, s], [0, 1, 0], [-s, 0, c]]);\n};\nMatrix.RotationZ = function (t) {\n    var c = Math.cos(t),\n        s = Math.sin(t);\n    return new Matrix([[c, -s, 0], [s, c, 0], [0, 0, 1]]);\n};\n\nMatrix.Random = function (n, m) {\n    return Matrix.Zero(n, m).map(function () {\n        return Math.random();\n    });\n};\n\n//From glUtils.js\nMatrix.Translation = function (v) {\n    if (v.elements.length == 2) {\n        var r = Matrix.I(3);\n        r.elements[2][0] = v.elements[0];\n        r.elements[2][1] = v.elements[1];\n        return r;\n    }\n\n    if (v.elements.length == 3) {\n        var r = Matrix.I(4);\n        r.elements[0][3] = v.elements[0];\n        r.elements[1][3] = v.elements[1];\n        r.elements[2][3] = v.elements[2];\n        return r;\n    }\n\n    throw \"Invalid length for Translation\";\n};\n\nMatrix.Zero = function (n, m) {\n    var els = [],\n        i = n,\n        j;\n    while (i--) {\n        j = m;\n        els[i] = [];\n        while (j--) {\n            els[i][j] = 0;\n        }\n    }\n    return new Matrix(els);\n};\n\nMatrix.prototype.toUpperTriangular = Matrix.prototype.toRightTriangular;\nMatrix.prototype.det = Matrix.prototype.determinant;\nMatrix.prototype.tr = Matrix.prototype.trace;\nMatrix.prototype.rk = Matrix.prototype.rank;\nMatrix.prototype.inv = Matrix.prototype.inverse;\nMatrix.prototype.x = Matrix.prototype.multiply;\n//# sourceMappingURL=Matrix.js.map\n\n\n//# sourceURL=webpack:///./node_modules/sylvester-es6/target/Matrix.js?");

/***/ }),

/***/ "./node_modules/sylvester-es6/target/PRECISION.js":
/*!********************************************************!*\
  !*** ./node_modules/sylvester-es6/target/PRECISION.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar PRECISION = exports.PRECISION = 1e-6;\n//# sourceMappingURL=PRECISION.js.map\n\n\n//# sourceURL=webpack:///./node_modules/sylvester-es6/target/PRECISION.js?");

/***/ }),

/***/ "./node_modules/sylvester-es6/target/Plane.js":
/*!****************************************************!*\
  !*** ./node_modules/sylvester-es6/target/Plane.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Plane = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _PRECISION = __webpack_require__(/*! ./PRECISION */ \"./node_modules/sylvester-es6/target/PRECISION.js\");\n\nvar _Matrix = __webpack_require__(/*! ./Matrix */ \"./node_modules/sylvester-es6/target/Matrix.js\");\n\nvar _Vector = __webpack_require__(/*! ./Vector */ \"./node_modules/sylvester-es6/target/Vector.js\");\n\nvar _Line = __webpack_require__(/*! ./Line */ \"./node_modules/sylvester-es6/target/Line.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Plane = exports.Plane = function () {\n    function Plane(anchor, v1, v2) {\n        _classCallCheck(this, Plane);\n\n        this.setVectors(anchor, v1, v2);\n    }\n\n    _createClass(Plane, [{\n        key: \"eql\",\n        value: function eql(plane) {\n            return this.contains(plane.anchor) && this.isParallelTo(plane);\n        }\n    }, {\n        key: \"dup\",\n        value: function dup() {\n            return new Plane(this.anchor, this.normal);\n        }\n    }, {\n        key: \"translate\",\n        value: function translate(vector) {\n            var V = vector.elements || vector;\n            return new Plane([this.anchor.elements[0] + V[0], this.anchor.elements[1] + V[1], this.anchor.elements[2] + (V[2] || 0)], this.normal);\n        }\n    }, {\n        key: \"isParallelTo\",\n        value: function isParallelTo(obj) {\n            var theta;\n            if (obj.normal) {\n                // obj is a plane\n                theta = this.normal.angleFrom(obj.normal);\n                return Math.abs(theta) <= _PRECISION.PRECISION || Math.abs(Math.PI - theta) <= _PRECISION.PRECISION;\n            } else if (obj.direction) {\n                // obj is a line\n                return this.normal.isPerpendicularTo(obj.direction);\n            }\n            return null;\n        }\n    }, {\n        key: \"isPerpendicularTo\",\n        value: function isPerpendicularTo(plane) {\n            var theta = this.normal.angleFrom(plane.normal);\n            return Math.abs(Math.PI / 2 - theta) <= _PRECISION.PRECISION;\n        }\n    }, {\n        key: \"distanceFrom\",\n        value: function distanceFrom(obj) {\n            if (this.intersects(obj) || this.contains(obj)) {\n                return 0;\n            }\n            if (obj.anchor) {\n                // obj is a plane or line\n                var A = this.anchor.elements,\n                    B = obj.anchor.elements,\n                    N = this.normal.elements;\n                return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);\n            } else {\n                // obj is a point\n                var P = obj.elements || obj;\n                var A = this.anchor.elements,\n                    N = this.normal.elements;\n                return Math.abs((A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2]);\n            }\n        }\n    }, {\n        key: \"contains\",\n        value: function contains(obj) {\n            if (obj.normal) {\n                return null;\n            }\n            if (obj.direction) {\n                return this.contains(obj.anchor) && this.contains(obj.anchor.add(obj.direction));\n            } else {\n                var P = obj.elements || obj;\n                var A = this.anchor.elements,\n                    N = this.normal.elements;\n                var diff = Math.abs(N[0] * (A[0] - P[0]) + N[1] * (A[1] - P[1]) + N[2] * (A[2] - (P[2] || 0)));\n                return diff <= _PRECISION.PRECISION;\n            }\n        }\n    }, {\n        key: \"intersects\",\n        value: function intersects(obj) {\n            if (typeof obj.direction === 'undefined' && typeof obj.normal === 'undefined') {\n                return null;\n            }\n            return !this.isParallelTo(obj);\n        }\n    }, {\n        key: \"intersectionWith\",\n        value: function intersectionWith(obj) {\n            if (!this.intersects(obj)) {\n                return null;\n            }\n            if (obj.direction) {\n                // obj is a line\n                var A = obj.anchor.elements,\n                    D = obj.direction.elements,\n                    P = this.anchor.elements,\n                    N = this.normal.elements;\n                var multiplier = (N[0] * (P[0] - A[0]) + N[1] * (P[1] - A[1]) + N[2] * (P[2] - A[2])) / (N[0] * D[0] + N[1] * D[1] + N[2] * D[2]);\n                return new _Vector.Vector([A[0] + D[0] * multiplier, A[1] + D[1] * multiplier, A[2] + D[2] * multiplier]);\n            } else if (obj.normal) {\n                // obj is a plane\n                var direction = this.normal.cross(obj.normal).toUnitVector();\n                // To find an anchor point, we find one co-ordinate that has a value of\n                // zero somewhere on the intersection, and remember which one we picked\n                var N = this.normal.elements,\n                    A = this.anchor.elements,\n                    O = obj.normal.elements,\n                    B = obj.anchor.elements;\n                var solver = _Matrix.Matrix.Zero(2, 2),\n                    i = 0;\n                while (solver.isSingular()) {\n                    i++;\n                    solver = new _Matrix.Matrix([[N[i % 3], N[(i + 1) % 3]], [O[i % 3], O[(i + 1) % 3]]]);\n                }\n                // Then we solve the simultaneous equations in the remaining dimensions\n                var inverse = solver.inverse().elements;\n                var x = N[0] * A[0] + N[1] * A[1] + N[2] * A[2];\n                var y = O[0] * B[0] + O[1] * B[1] + O[2] * B[2];\n                var intersection = [inverse[0][0] * x + inverse[0][1] * y, inverse[1][0] * x + inverse[1][1] * y];\n                var anchor = [];\n                for (var j = 1; j <= 3; j++) {\n                    // This formula picks the right element from intersection by cycling\n                    // depending on which element we set to zero above\n                    anchor.push(i === j ? 0 : intersection[(j + (5 - i) % 3) % 3]);\n                }\n                return new _Line.Line(anchor, direction);\n            }\n        }\n    }, {\n        key: \"pointClosestTo\",\n        value: function pointClosestTo(point) {\n            var P = point.elements || point;\n            var A = this.anchor.elements,\n                N = this.normal.elements;\n            var dot = (A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2];\n            return new _Vector.Vector([P[0] + N[0] * dot, P[1] + N[1] * dot, (P[2] || 0) + N[2] * dot]);\n        }\n    }, {\n        key: \"rotate\",\n        value: function rotate(t, line) {\n            var R = t.determinant ? t.elements : _Matrix.Matrix.Rotation(t, line.direction).elements;\n            var C = line.pointClosestTo(this.anchor).elements;\n            var A = this.anchor.elements,\n                N = this.normal.elements;\n            var C1 = C[0],\n                C2 = C[1],\n                C3 = C[2],\n                A1 = A[0],\n                A2 = A[1],\n                A3 = A[2];\n            var x = A1 - C1,\n                y = A2 - C2,\n                z = A3 - C3;\n            return new Plane([C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z, C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z, C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z], [R[0][0] * N[0] + R[0][1] * N[1] + R[0][2] * N[2], R[1][0] * N[0] + R[1][1] * N[1] + R[1][2] * N[2], R[2][0] * N[0] + R[2][1] * N[1] + R[2][2] * N[2]]);\n        }\n    }, {\n        key: \"reflectionIn\",\n        value: function reflectionIn(obj) {\n            if (obj.normal) {\n                // obj is a plane\n                var A = this.anchor.elements,\n                    N = this.normal.elements;\n                var A1 = A[0],\n                    A2 = A[1],\n                    A3 = A[2],\n                    N1 = N[0],\n                    N2 = N[1],\n                    N3 = N[2];\n                var newA = this.anchor.reflectionIn(obj).elements;\n                // Add the plane's normal to its anchor, then mirror that in the other plane\n                var AN1 = A1 + N1,\n                    AN2 = A2 + N2,\n                    AN3 = A3 + N3;\n                var Q = obj.pointClosestTo([AN1, AN2, AN3]).elements;\n                var newN = [Q[0] + (Q[0] - AN1) - newA[0], Q[1] + (Q[1] - AN2) - newA[1], Q[2] + (Q[2] - AN3) - newA[2]];\n                return new Plane(newA, newN);\n            } else if (obj.direction) {\n                // obj is a line\n                return this.rotate(Math.PI, obj);\n            } else {\n                // obj is a point\n                var P = obj.elements || obj;\n                return new Plane(this.anchor.reflectionIn([P[0], P[1], P[2] || 0]), this.normal);\n            }\n        }\n    }, {\n        key: \"setVectors\",\n        value: function setVectors(anchor, v1, v2) {\n            anchor = new _Vector.Vector(anchor);\n            anchor = anchor.to3D();if (anchor === null) {\n                return null;\n            }\n            v1 = new _Vector.Vector(v1);\n            v1 = v1.to3D();if (v1 === null) {\n                return null;\n            }\n            if (typeof v2 === 'undefined') {\n                v2 = null;\n            } else {\n                v2 = new _Vector.Vector(v2);\n                v2 = v2.to3D();\n                if (v2 === null) {\n                    return null;\n                }\n            }\n            var A1 = anchor.elements[0],\n                A2 = anchor.elements[1],\n                A3 = anchor.elements[2];\n            var v11 = v1.elements[0],\n                v12 = v1.elements[1],\n                v13 = v1.elements[2];\n            var normal, mod;\n            if (v2 !== null) {\n                var v21 = v2.elements[0],\n                    v22 = v2.elements[1],\n                    v23 = v2.elements[2];\n                normal = new _Vector.Vector([(v12 - A2) * (v23 - A3) - (v13 - A3) * (v22 - A2), (v13 - A3) * (v21 - A1) - (v11 - A1) * (v23 - A3), (v11 - A1) * (v22 - A2) - (v12 - A2) * (v21 - A1)]);\n                mod = normal.modulus();\n                if (mod === 0) {\n                    return null;\n                }\n                normal = new _Vector.Vector([normal.elements[0] / mod, normal.elements[1] / mod, normal.elements[2] / mod]);\n            } else {\n                mod = Math.sqrt(v11 * v11 + v12 * v12 + v13 * v13);\n                if (mod === 0) {\n                    return null;\n                }\n                normal = new _Vector.Vector([v1.elements[0] / mod, v1.elements[1] / mod, v1.elements[2] / mod]);\n            }\n            this.anchor = anchor;\n            this.normal = normal;\n            return this;\n        }\n    }]);\n\n    return Plane;\n}();\n\nPlane.XY = new Plane(_Vector.Vector.Zero(3), _Vector.Vector.k);\nPlane.YZ = new Plane(_Vector.Vector.Zero(3), _Vector.Vector.i);\nPlane.ZX = new Plane(_Vector.Vector.Zero(3), _Vector.Vector.j);\nPlane.YX = Plane.XY;Plane.ZY = Plane.YZ;Plane.XZ = Plane.ZX;\n\nPlane.fromPoints = function (points) {\n    var np = points.length,\n        list = [],\n        i,\n        P,\n        n,\n        N,\n        A,\n        B,\n        C,\n        D,\n        theta,\n        prevN,\n        totalN = _Vector.Vector.Zero(3);\n    for (i = 0; i < np; i++) {\n        P = new _Vector.Vector(points[i]).to3D();\n        if (P === null) {\n            return null;\n        }\n        list.push(P);\n        n = list.length;\n        if (n > 2) {\n            // Compute plane normal for the latest three points\n            A = list[n - 1].elements;B = list[n - 2].elements;C = list[n - 3].elements;\n            N = new _Vector.Vector([(A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]), (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]), (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])]).toUnitVector();\n            if (n > 3) {\n                // If the latest normal is not (anti)parallel to the previous one, we've\n                // strayed off the plane. This might be a slightly long-winded way of\n                // doing things, but we need the sum of all the normals to find which\n                // way the plane normal should point so that the points form an\n                // anticlockwise list.\n                theta = N.angleFrom(prevN);\n                if (theta !== null) {\n                    if (!(Math.abs(theta) <= _PRECISION.PRECISION || Math.abs(theta - Math.PI) <= _PRECISION.PRECISION)) {\n                        return null;\n                    }\n                }\n            }\n            totalN = totalN.add(N);\n            prevN = N;\n        }\n    }\n    // We need to add in the normals at the start and end points, which the above\n    // misses out\n    A = list[1].elements;B = list[0].elements;C = list[n - 1].elements;D = list[n - 2].elements;\n    totalN = totalN.add(new _Vector.Vector([(A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]), (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]), (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])]).toUnitVector()).add(new _Vector.Vector([(B[1] - C[1]) * (D[2] - C[2]) - (B[2] - C[2]) * (D[1] - C[1]), (B[2] - C[2]) * (D[0] - C[0]) - (B[0] - C[0]) * (D[2] - C[2]), (B[0] - C[0]) * (D[1] - C[1]) - (B[1] - C[1]) * (D[0] - C[0])]).toUnitVector());\n    return new Plane(list[0], totalN);\n};\n//# sourceMappingURL=Plane.js.map\n\n\n//# sourceURL=webpack:///./node_modules/sylvester-es6/target/Plane.js?");

/***/ }),

/***/ "./node_modules/sylvester-es6/target/Polygon.js":
/*!******************************************************!*\
  !*** ./node_modules/sylvester-es6/target/Polygon.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Polygon = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _LinkedList = __webpack_require__(/*! ./LinkedList */ \"./node_modules/sylvester-es6/target/LinkedList.js\");\n\nvar _PRECISION = __webpack_require__(/*! ./PRECISION */ \"./node_modules/sylvester-es6/target/PRECISION.js\");\n\nvar _Matrix = __webpack_require__(/*! ./Matrix */ \"./node_modules/sylvester-es6/target/Matrix.js\");\n\nvar _Vector = __webpack_require__(/*! ./Vector */ \"./node_modules/sylvester-es6/target/Vector.js\");\n\nvar _Plane = __webpack_require__(/*! ./Plane */ \"./node_modules/sylvester-es6/target/Plane.js\");\n\nvar _Line = __webpack_require__(/*! ./Line */ \"./node_modules/sylvester-es6/target/Line.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Polygon = exports.Polygon = function () {\n    function Polygon(points, plane) {\n        _classCallCheck(this, Polygon);\n\n        this.setVertices(points, plane);\n    }\n\n    _createClass(Polygon, [{\n        key: \"v\",\n        value: function v(i) {\n            return this.vertices.at(i - 1).data;\n        }\n    }, {\n        key: \"nodeFor\",\n        value: function nodeFor(vertex) {\n            return this.vertices.withData(vertex);\n        }\n    }, {\n        key: \"dup\",\n        value: function dup() {\n            return new Polygon(this.vertices, this.plane);\n        }\n    }, {\n        key: \"translate\",\n        value: function translate(vector) {\n            var P = vector.elements || vector;\n            this.vertices.each(function (node) {\n                var E = node.data.elements;\n                node.data.setElements([E[0] + P[0], E[1] + P[1], E[2] + (P[2] || 0)]);\n            });\n            this.plane = this.plane.translate(vector);\n            this.updateTrianglePlanes(function (plane) {\n                return plane.translate(vector);\n            });\n            return this;\n        }\n    }, {\n        key: \"rotate\",\n        value: function rotate(t, line) {\n            var R = _Matrix.Matrix.Rotation(t, line.direction);\n            this.vertices.each(function (node) {\n                node.data.setElements(node.data.rotate(R, line).elements);\n            });\n            this.plane = this.plane.rotate(R, line);\n            this.updateTrianglePlanes(function (plane) {\n                return plane.rotate(R, line);\n            });\n            return this;\n        }\n    }, {\n        key: \"scale\",\n        value: function scale(k, point) {\n            var P = point.elements || point;\n            this.vertices.each(function (node) {\n                var E = node.data.elements;\n                node.data.setElements([P[0] + k * (E[0] - P[0]), P[1] + k * (E[1] - P[1]), (P[2] || 0) + k * (E[2] - (P[2] || 0))]);\n            });\n            var anchor = this.vertices.first.data;\n            this.plane.anchor.setElements(anchor);\n            this.updateTrianglePlanes(function (plane) {\n                return new _Plane.Plane(anchor, plane.normal);\n            });\n            return this;\n        }\n\n        // Updates the plane properties of all the cached triangles belonging to the\n        // polygon according to the given function. For example, suppose you just\n        // rotated the polygon, you should call:\n        //\n        //   poly.updateTrianglePlanes(function(plane) { return plane.rotate(t, line); });\n        //\n        // This method is called automatically by Polygon.translate,\n        // Polygon.rotate and Polygon.scale transformation methods.\n\n    }, {\n        key: \"updateTrianglePlanes\",\n        value: function updateTrianglePlanes(fn) {\n            var i;\n            if (this.cached.triangles !== null) {\n                i = this.cached.triangles.length;\n                while (i--) {\n                    this.cached.triangles[i].plane = fn(this.cached.triangles[i].plane);\n                }\n            }\n            if (this.cached.surfaceIntegralElements !== null) {\n                i = this.cached.surfaceIntegralElements.length;\n                while (i--) {\n                    this.cached.surfaceIntegralElements[i].plane = fn(this.cached.surfaceIntegralElements[i].plane);\n                }\n            }\n        }\n    }, {\n        key: \"isTriangle\",\n        value: function isTriangle() {\n            return this.vertices.length === 3;\n        }\n\n        // Returns a collection of triangles used for calculating area and center of\n        // mass. Some of the triangles will not lie inside the polygon - this\n        // collection is essentially a series of itervals in a surface integral, so\n        // some are 'negative'. If you want the polygon broken into constituent\n        // triangles, use toTriangles(). This method is used because it's much faster\n        // than toTriangles().\n        //\n        // The triangles generated share vertices with the original polygon, so they\n        // transform with the polygon. They are cached after first calculation and\n        // should remain in sync with changes to the parent polygon.\n\n    }, {\n        key: \"trianglesForSurfaceIntegral\",\n        value: function trianglesForSurfaceIntegral() {\n            if (this.cached.surfaceIntegralElements !== null) {\n                return this.cached.surfaceIntegralElements;\n            }\n            var triangles = [];\n            var firstVertex = this.vertices.first.data;\n            var plane = this.plane;\n            this.vertices.each(function (node, i) {\n                if (i < 2) {\n                    return;\n                }\n                var points = [firstVertex, node.prev.data, node.data];\n                // If the vertices lie on a straigh line, give the polygon's own plane. If\n                // the element has no area, it doesn't matter which way its normal faces.\n                triangles.push(new Polygon(points, _Plane.Plane.fromPoints(points) || plane));\n            });\n            return this.setCache('surfaceIntegralElements', triangles);\n        }\n    }, {\n        key: \"area\",\n        value: function area() {\n            if (this.isTriangle()) {\n                // Area is half the modulus of the cross product of two sides\n                var A = this.vertices.first,\n                    B = A.next,\n                    C = B.next;\n                A = A.data.elements;B = B.data.elements;C = C.data.elements;\n                return 0.5 * new _Vector.Vector([(A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]), (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]), (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])]).modulus();\n            } else {\n                var trigs = this.trianglesForSurfaceIntegral(),\n                    area = 0;\n                var i = trigs.length;\n                while (i--) {\n                    area += trigs[i].area() * trigs[i].plane.normal.dot(this.plane.normal);\n                }\n                return area;\n            }\n        }\n    }, {\n        key: \"centroid\",\n        value: function centroid() {\n            if (this.isTriangle()) {\n                var A = this.v(1).elements,\n                    B = this.v(2).elements,\n                    C = this.v(3).elements;\n                return new _Vector.Vector([(A[0] + B[0] + C[0]) / 3, (A[1] + B[1] + C[1]) / 3, (A[2] + B[2] + C[2]) / 3]);\n            } else {\n                var A,\n                    M = 0,\n                    V = _Vector.Vector.Zero(3),\n                    P,\n                    C,\n                    trigs = this.trianglesForSurfaceIntegral();\n                var i = trigs.length;\n                while (i--) {\n                    A = trigs[i].area() * trigs[i].plane.normal.dot(this.plane.normal);\n                    M += A;\n                    P = V.elements;\n                    C = trigs[i].centroid().elements;\n                    V.setElements([P[0] + C[0] * A, P[1] + C[1] * A, P[2] + C[2] * A]);\n                }\n                return V.x(1 / M);\n            }\n        }\n    }, {\n        key: \"projectionOn\",\n        value: function projectionOn(plane) {\n            var points = [];\n            this.vertices.each(function (node) {\n                points.push(plane.pointClosestTo(node.data));\n            });\n            return new Polygon(points);\n        }\n    }, {\n        key: \"removeVertex\",\n        value: function removeVertex(vertex) {\n            if (this.isTriangle()) {\n                return;\n            }\n            var node = this.nodeFor(vertex);\n            if (node === null) {\n                return null;\n            }\n            this.clearCache();\n            // Previous and next entries in the main vertex list\n            var prev = node.prev,\n                next = node.next;\n            var prevWasConvex = prev.data.isConvex(this);\n            var nextWasConvex = next.data.isConvex(this);\n            if (node.data.isConvex(this)) {\n                this.convexVertices.remove(this.convexVertices.withData(node.data));\n            } else {\n                this.reflexVertices.remove(this.reflexVertices.withData(node.data));\n            }\n            this.vertices.remove(node);\n            // Deal with previous vertex's change of class\n            if (prevWasConvex !== prev.data.isConvex(this)) {\n                if (prevWasConvex) {\n                    this.convexVertices.remove(this.convexVertices.withData(prev.data));\n                    this.reflexVertices.append(new _LinkedList.LinkedList.Node(prev.data));\n                } else {\n                    this.reflexVertices.remove(this.reflexVertices.withData(prev.data));\n                    this.convexVertices.append(new _LinkedList.LinkedList.Node(prev.data));\n                }\n            }\n            // Deal with next vertex's change of class\n            if (nextWasConvex !== next.data.isConvex(this)) {\n                if (nextWasConvex) {\n                    this.convexVertices.remove(this.convexVertices.withData(next.data));\n                    this.reflexVertices.append(new _LinkedList.LinkedList.Node(next.data));\n                } else {\n                    this.reflexVertices.remove(this.reflexVertices.withData(next.data));\n                    this.convexVertices.append(new _LinkedList.LinkedList.Node(next.data));\n                }\n            }\n            return this;\n        }\n    }, {\n        key: \"contains\",\n        value: function contains(point) {\n            return this.containsByWindingNumber(point);\n        }\n    }, {\n        key: \"containsByWindingNumber\",\n        value: function containsByWindingNumber(point) {\n            var P = point.elements || point;\n            if (!this.plane.contains(P)) {\n                return false;\n            }\n            if (this.hasEdgeContaining(P)) {\n                return false;\n            }\n            var V,\n                W,\n                A,\n                B,\n                theta = 0,\n                dt,\n                loops = 0,\n                self = this;\n            this.vertices.each(function (node) {\n                V = node.data.elements;\n                W = node.next.data.elements;\n                A = new _Vector.Vector([V[0] - P[0], V[1] - P[1], V[2] - (P[2] || 0)]);\n                B = new _Vector.Vector([W[0] - P[0], W[1] - P[1], W[2] - (P[2] || 0)]);\n                dt = A.angleFrom(B);\n                if (dt === null || dt === 0) {\n                    return;\n                }\n                theta += (A.cross(B).isParallelTo(self.plane.normal) ? 1 : -1) * dt;\n                if (theta >= 2 * Math.PI - _PRECISION.PRECISION) {\n                    loops++;theta -= 2 * Math.PI;\n                }\n                if (theta <= -2 * Math.PI + _PRECISION.PRECISION) {\n                    loops--;theta += 2 * Math.PI;\n                }\n            });\n            return loops !== 0;\n        }\n    }, {\n        key: \"hasEdgeContaining\",\n        value: function hasEdgeContaining(point) {\n            var P = point.elements || point;\n            var success = false;\n            this.vertices.each(function (node) {\n                if (_Line.Line.Segment.create(node.data, node.next.data).contains(P)) {\n                    success = true;\n                }\n            });\n            return success;\n        }\n    }, {\n        key: \"toTriangles\",\n        value: function toTriangles() {\n            if (this.cached.triangles !== null) {\n                return this.cached.triangles;\n            }\n            return this.setCache('triangles', this.triangulateByEarClipping());\n        }\n\n        // Implementation of ear clipping algorithm\n        // Found in 'Triangulation by ear clipping', by David Eberly\n        // at http://www.geometrictools.com\n        // This will not deal with overlapping sections - contruct your polygons\n        // sensibly\n\n    }, {\n        key: \"triangulateByEarClipping\",\n        value: function triangulateByEarClipping() {\n            var poly = this.dup(),\n                triangles = [],\n                success,\n                convexNode,\n                mainNode,\n                trig;\n            while (!poly.isTriangle()) {\n                success = false;\n                while (!success) {\n                    success = true;\n                    // Ear tips must be convex vertices - let's pick one at random\n                    convexNode = poly.convexVertices.randomNode();\n                    mainNode = poly.vertices.withData(convexNode.data);\n                    // For convex vertices, this order will always be anticlockwise\n                    trig = new Polygon([mainNode.data, mainNode.next.data, mainNode.prev.data], this.plane);\n                    // Now test whether any reflex vertices lie within the ear\n                    poly.reflexVertices.each(function (node) {\n                        // Don't test points belonging to this triangle. node won't be equal\n                        // to convexNode as node is reflex and vertex is convex.\n                        if (node.data !== mainNode.prev.data && node.data !== mainNode.next.data) {\n                            if (trig.contains(node.data) || trig.hasEdgeContaining(node.data)) {\n                                success = false;\n                            }\n                        }\n                    });\n                }\n                triangles.push(trig);\n                poly.removeVertex(mainNode.data);\n            }\n            // Need to do this to renumber the remaining vertices\n            triangles.push(new Polygon(poly.vertices, this.plane));\n            return triangles;\n        }\n    }, {\n        key: \"setVertices\",\n        value: function setVertices(points, plane) {\n            var pointSet = points.toArray ? points.toArray() : points;\n            this.plane = plane && plane.normal ? plane.dup() : _Plane.Plane.fromPoints(pointSet);\n            if (this.plane === null) {\n                return null;\n            }\n            this.vertices = new _LinkedList.LinkedList.Circular();\n            // Construct linked list of vertices. If each point is already a polygon\n            // vertex, we reference it rather than creating a new vertex.\n            var i = pointSet.length,\n                newVertex;\n            while (i--) {\n                newVertex = pointSet[i].isConvex ? pointSet[i] : new Polygon.Vertex(pointSet[i]);\n                this.vertices.prepend(new _LinkedList.LinkedList.Node(newVertex));\n            }\n            this.clearCache();\n            this.populateVertexTypeLists();\n            return this;\n        }\n    }, {\n        key: \"populateVertexTypeLists\",\n        value: function populateVertexTypeLists() {\n            this.convexVertices = new _LinkedList.LinkedList.Circular();\n            this.reflexVertices = new _LinkedList.LinkedList.Circular();\n            var self = this;\n            this.vertices.each(function (node) {\n                // Split vertices into convex / reflex groups. The\n                // LinkedList.Node class wraps each vertex so it can belong to\n                // many linked lists.\n                self[node.data.type(self) + 'Vertices'].append(new _LinkedList.LinkedList.Node(node.data));\n            });\n        }\n    }, {\n        key: \"copyVertices\",\n        value: function copyVertices() {\n            this.clearCache();\n            this.vertices.each(function (node) {\n                node.data = new Polygon.Vertex(node.data);\n            });\n            this.populateVertexTypeLists();\n        }\n    }, {\n        key: \"clearCache\",\n        value: function clearCache() {\n            this.cached = {\n                triangles: null,\n                surfaceIntegralElements: null\n            };\n        }\n    }, {\n        key: \"setCache\",\n        value: function setCache(key, value) {\n            this.cached[key] = value;\n            return value;\n        }\n    }, {\n        key: \"inspect\",\n        value: function inspect() {\n            var points = [];\n            this.vertices.each(function (node) {\n                points.push(node.data.inspect());\n            });\n            return points.join(' -> ');\n        }\n    }]);\n\n    return Polygon;\n}();\n//# sourceMappingURL=Polygon.js.map\n\n\n//# sourceURL=webpack:///./node_modules/sylvester-es6/target/Polygon.js?");

/***/ }),

/***/ "./node_modules/sylvester-es6/target/Sylvester.js":
/*!********************************************************!*\
  !*** ./node_modules/sylvester-es6/target/Sylvester.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n//Classes\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _CircularLinkedList = __webpack_require__(/*! ./CircularLinkedList */ \"./node_modules/sylvester-es6/target/CircularLinkedList.js\");\n\nObject.defineProperty(exports, \"CircularLinkedList\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _CircularLinkedList.CircularLinkedList;\n\t}\n});\n\nvar _Line = __webpack_require__(/*! ./Line */ \"./node_modules/sylvester-es6/target/Line.js\");\n\nObject.defineProperty(exports, \"Line\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _Line.Line;\n\t}\n});\n\nvar _LineSegment = __webpack_require__(/*! ./LineSegment */ \"./node_modules/sylvester-es6/target/LineSegment.js\");\n\nObject.defineProperty(exports, \"LineSegment\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _LineSegment.LineSegment;\n\t}\n});\n\nvar _LinkedList = __webpack_require__(/*! ./LinkedList */ \"./node_modules/sylvester-es6/target/LinkedList.js\");\n\nObject.defineProperty(exports, \"LinkedList\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _LinkedList.LinkedList;\n\t}\n});\n\nvar _LinkedListNode = __webpack_require__(/*! ./LinkedListNode */ \"./node_modules/sylvester-es6/target/LinkedListNode.js\");\n\nObject.defineProperty(exports, \"LinkedListNode\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _LinkedListNode.LinkedListNode;\n\t}\n});\n\nvar _Matrix = __webpack_require__(/*! ./Matrix */ \"./node_modules/sylvester-es6/target/Matrix.js\");\n\nObject.defineProperty(exports, \"Matrix\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _Matrix.Matrix;\n\t}\n});\n\nvar _Plane = __webpack_require__(/*! ./Plane */ \"./node_modules/sylvester-es6/target/Plane.js\");\n\nObject.defineProperty(exports, \"Plane\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _Plane.Plane;\n\t}\n});\n\nvar _Polygon = __webpack_require__(/*! ./Polygon */ \"./node_modules/sylvester-es6/target/Polygon.js\");\n\nObject.defineProperty(exports, \"Polygon\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _Polygon.Polygon;\n\t}\n});\n\nvar _Vector = __webpack_require__(/*! ./Vector */ \"./node_modules/sylvester-es6/target/Vector.js\");\n\nObject.defineProperty(exports, \"Vector\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _Vector.Vector;\n\t}\n});\n\nvar _Vertex = __webpack_require__(/*! ./Vertex */ \"./node_modules/sylvester-es6/target/Vertex.js\");\n\nObject.defineProperty(exports, \"Vertex\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _Vertex.Vertex;\n\t}\n});\n\nvar _Utils = __webpack_require__(/*! ./Utils */ \"./node_modules/sylvester-es6/target/Utils.js\");\n\nObject.defineProperty(exports, \"mht\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _Utils.mht;\n\t}\n});\nObject.defineProperty(exports, \"makeLookAt\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _Utils.makeLookAt;\n\t}\n});\nObject.defineProperty(exports, \"makePerspective\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _Utils.makePerspective;\n\t}\n});\nObject.defineProperty(exports, \"makeFrustum\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _Utils.makeFrustum;\n\t}\n});\nObject.defineProperty(exports, \"makeOrtho\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _Utils.makeOrtho;\n\t}\n});\n\nvar _PRECISION = __webpack_require__(/*! ./PRECISION */ \"./node_modules/sylvester-es6/target/PRECISION.js\");\n\nObject.defineProperty(exports, \"PRECISION\", {\n\tenumerable: true,\n\tget: function get() {\n\t\treturn _PRECISION.PRECISION;\n\t}\n});\n//# sourceMappingURL=Sylvester.js.map\n\n\n//# sourceURL=webpack:///./node_modules/sylvester-es6/target/Sylvester.js?");

/***/ }),

/***/ "./node_modules/sylvester-es6/target/Utils.js":
/*!****************************************************!*\
  !*** ./node_modules/sylvester-es6/target/Utils.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.mht = mht;\nexports.makeLookAt = makeLookAt;\nexports.makeOrtho = makeOrtho;\nexports.makePerspective = makePerspective;\nexports.makeFrustum = makeFrustum;\nexports.makeOrtho = makeOrtho;\n\nvar _Vector = __webpack_require__(/*! ./Vector */ \"./node_modules/sylvester-es6/target/Vector.js\");\n\nvar _Matrix = __webpack_require__(/*! ./Matrix */ \"./node_modules/sylvester-es6/target/Matrix.js\");\n\n//From glUtils.js\nfunction mht(m) {\n    var s = \"\";\n    if (m.length == 16) {\n        for (var i = 0; i < 4; i++) {\n            s += \"<span style='font-family: monospace'>[\" + m[i * 4 + 0].toFixed(4) + \",\" + m[i * 4 + 1].toFixed(4) + \",\" + m[i * 4 + 2].toFixed(4) + \",\" + m[i * 4 + 3].toFixed(4) + \"]</span><br>\";\n        }\n    } else if (m.length == 9) {\n        for (var i = 0; i < 3; i++) {\n            s += \"<span style='font-family: monospace'>[\" + m[i * 3 + 0].toFixed(4) + \",\" + m[i * 3 + 1].toFixed(4) + \",\" + m[i * 3 + 2].toFixed(4) + \"]</font><br>\";\n        }\n    } else {\n        return m.toString();\n    }\n    return s;\n}\n\n//From glUtils.js\n//\n// gluLookAt\n//\nfunction makeLookAt(ex, ey, ez, cx, cy, cz, ux, uy, uz) {\n    var eye = new _Vector.Vector([ex, ey, ez]);\n    var center = new _Vector.Vector([cx, cy, cz]);\n    var up = new _Vector.Vector([ux, uy, uz]);\n\n    var mag;\n\n    var z = eye.subtract(center).toUnitVector();\n    var x = up.cross(z).toUnitVector();\n    var y = z.cross(x).toUnitVector();\n\n    var m = new _Matrix.Matrix([[x.e(1), x.e(2), x.e(3), 0], [y.e(1), y.e(2), y.e(3), 0], [z.e(1), z.e(2), z.e(3), 0], [0, 0, 0, 1]]);\n\n    var t = new _Matrix.Matrix([[1, 0, 0, -ex], [0, 1, 0, -ey], [0, 0, 1, -ez], [0, 0, 0, 1]]);\n    return m.x(t);\n}\n\n//From glUtils.js\n//\n// glOrtho\n//\nfunction makeOrtho(left, right, bottom, top, znear, zfar) {\n    var tx = -(right + left) / (right - left);\n    var ty = -(top + bottom) / (top - bottom);\n    var tz = -(zfar + znear) / (zfar - znear);\n\n    return new _Matrix.Matrix([[2 / (right - left), 0, 0, tx], [0, 2 / (top - bottom), 0, ty], [0, 0, -2 / (zfar - znear), tz], [0, 0, 0, 1]]);\n}\n\n//From glUtils.js\n//\n// gluPerspective\n//\nfunction makePerspective(fovy, aspect, znear, zfar) {\n    var ymax = znear * Math.tan(fovy * Math.PI / 360.0);\n    var ymin = -ymax;\n    var xmin = ymin * aspect;\n    var xmax = ymax * aspect;\n\n    return makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);\n}\n\n//From glUtils.js\n//\n// glFrustum\n//\nfunction makeFrustum(left, right, bottom, top, znear, zfar) {\n    var X = 2 * znear / (right - left);\n    var Y = 2 * znear / (top - bottom);\n    var A = (right + left) / (right - left);\n    var B = (top + bottom) / (top - bottom);\n    var C = -(zfar + znear) / (zfar - znear);\n    var D = -2 * zfar * znear / (zfar - znear);\n\n    return new _Matrix.Matrix([[X, 0, A, 0], [0, Y, B, 0], [0, 0, C, D], [0, 0, -1, 0]]);\n}\n\n//From glUtils.js\n//\n// glOrtho\n//\nfunction makeOrtho(left, right, bottom, top, znear, zfar) {\n    var tx = -(right + left) / (right - left);\n    var ty = -(top + bottom) / (top - bottom);\n    var tz = -(zfar + znear) / (zfar - znear);\n\n    return new _Matrix.Matrix([[2 / (right - left), 0, 0, tx], [0, 2 / (top - bottom), 0, ty], [0, 0, -2 / (zfar - znear), tz], [0, 0, 0, 1]]);\n}\n//# sourceMappingURL=Utils.js.map\n\n\n//# sourceURL=webpack:///./node_modules/sylvester-es6/target/Utils.js?");

/***/ }),

/***/ "./node_modules/sylvester-es6/target/Vector.js":
/*!*****************************************************!*\
  !*** ./node_modules/sylvester-es6/target/Vector.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Vector = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Matrix = __webpack_require__(/*! ./Matrix */ \"./node_modules/sylvester-es6/target/Matrix.js\");\n\nvar _PRECISION = __webpack_require__(/*! ./PRECISION */ \"./node_modules/sylvester-es6/target/PRECISION.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Vector = exports.Vector = function () {\n    function Vector(elements) {\n        _classCallCheck(this, Vector);\n\n        this.setElements(elements);\n    }\n\n    _createClass(Vector, [{\n        key: \"e\",\n        value: function e(i) {\n            return i < 1 || i > this.elements.length ? null : this.elements[i - 1];\n        }\n    }, {\n        key: \"dimensions\",\n        value: function dimensions() {\n            return this.elements.length;\n        }\n    }, {\n        key: \"modulus\",\n        value: function modulus() {\n            return Math.sqrt(this.dot(this));\n        }\n    }, {\n        key: \"eql\",\n        value: function eql(vector) {\n            var n = this.elements.length;\n            var V = vector.elements || vector;\n            if (n !== V.length) {\n                return false;\n            }\n            while (n--) {\n                if (Math.abs(this.elements[n] - V[n]) > _PRECISION.PRECISION) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }, {\n        key: \"dup\",\n        value: function dup() {\n            return new Vector(this.elements);\n        }\n    }, {\n        key: \"map\",\n        value: function map(fn, context) {\n            var elements = [];\n            this.each(function (x, i) {\n                elements.push(fn.call(context, x, i));\n            });\n            return new Vector(elements);\n        }\n    }, {\n        key: \"forEach\",\n        value: function forEach(fn, context) {\n            var n = this.elements.length;\n            for (var i = 0; i < n; i++) {\n                fn.call(context, this.elements[i], i + 1);\n            }\n        }\n    }, {\n        key: \"toUnitVector\",\n        value: function toUnitVector() {\n            var r = this.modulus();\n            if (r === 0) {\n                return this.dup();\n            }\n            return this.map(function (x) {\n                return x / r;\n            });\n        }\n    }, {\n        key: \"angleFrom\",\n        value: function angleFrom(vector) {\n            var V = vector.elements || vector;\n            var n = this.elements.length,\n                k = n,\n                i;\n            if (n !== V.length) {\n                return null;\n            }\n            var dot = 0,\n                mod1 = 0,\n                mod2 = 0;\n            // Work things out in parallel to save time\n            this.each(function (x, i) {\n                dot += x * V[i - 1];\n                mod1 += x * x;\n                mod2 += V[i - 1] * V[i - 1];\n            });\n            mod1 = Math.sqrt(mod1);mod2 = Math.sqrt(mod2);\n            if (mod1 * mod2 === 0) {\n                return null;\n            }\n            var theta = dot / (mod1 * mod2);\n            if (theta < -1) {\n                theta = -1;\n            }\n            if (theta > 1) {\n                theta = 1;\n            }\n            return Math.acos(theta);\n        }\n    }, {\n        key: \"isParallelTo\",\n        value: function isParallelTo(vector) {\n            var angle = this.angleFrom(vector);\n            return angle === null ? null : angle <= _PRECISION.PRECISION;\n        }\n    }, {\n        key: \"isAntiparallelTo\",\n        value: function isAntiparallelTo(vector) {\n            var angle = this.angleFrom(vector);\n            return angle === null ? null : Math.abs(angle - Math.PI) <= _PRECISION.PRECISION;\n        }\n    }, {\n        key: \"isPerpendicularTo\",\n        value: function isPerpendicularTo(vector) {\n            var dot = this.dot(vector);\n            return dot === null ? null : Math.abs(dot) <= _PRECISION.PRECISION;\n        }\n    }, {\n        key: \"add\",\n        value: function add(vector) {\n            var V = vector.elements || vector;\n            if (this.elements.length !== V.length) {\n                return null;\n            }\n            return this.map(function (x, i) {\n                return x + V[i - 1];\n            });\n        }\n    }, {\n        key: \"subtract\",\n        value: function subtract(vector) {\n            var V = vector.elements || vector;\n            if (this.elements.length !== V.length) {\n                return null;\n            }\n            return this.map(function (x, i) {\n                return x - V[i - 1];\n            });\n        }\n    }, {\n        key: \"multiply\",\n        value: function multiply(k) {\n            return this.map(function (x) {\n                return x * k;\n            });\n        }\n    }, {\n        key: \"dot\",\n        value: function dot(vector) {\n            var V = vector.elements || vector;\n            var i,\n                product = 0,\n                n = this.elements.length;\n            if (n !== V.length) {\n                return null;\n            }\n            while (n--) {\n                product += this.elements[n] * V[n];\n            }\n            return product;\n        }\n    }, {\n        key: \"cross\",\n        value: function cross(vector) {\n            var B = vector.elements || vector;\n            if (this.elements.length !== 3 || B.length !== 3) {\n                return null;\n            }\n            var A = this.elements;\n            return new Vector([A[1] * B[2] - A[2] * B[1], A[2] * B[0] - A[0] * B[2], A[0] * B[1] - A[1] * B[0]]);\n        }\n    }, {\n        key: \"max\",\n        value: function max() {\n            var m = 0,\n                i = this.elements.length;\n            while (i--) {\n                if (Math.abs(this.elements[i]) > Math.abs(m)) {\n                    m = this.elements[i];\n                }\n            }\n            return m;\n        }\n    }, {\n        key: \"indexOf\",\n        value: function indexOf(x) {\n            var index = null,\n                n = this.elements.length;\n            for (var i = 0; i < n; i++) {\n                if (index === null && this.elements[i] === x) {\n                    index = i + 1;\n                }\n            }\n            return index;\n        }\n    }, {\n        key: \"toDiagonalMatrix\",\n        value: function toDiagonalMatrix() {\n            return _Matrix.Matrix.Diagonal(this.elements);\n        }\n    }, {\n        key: \"round\",\n        value: function round() {\n            return this.map(function (x) {\n                return Math.round(x);\n            });\n        }\n    }, {\n        key: \"snapTo\",\n        value: function snapTo(x) {\n            return this.map(function (y) {\n                return Math.abs(y - x) <= _PRECISION.PRECISION ? x : y;\n            });\n        }\n    }, {\n        key: \"distanceFrom\",\n        value: function distanceFrom(obj) {\n            if (obj.anchor || obj.start && obj.end) {\n                return obj.distanceFrom(this);\n            }\n            var V = obj.elements || obj;\n            if (V.length !== this.elements.length) {\n                return null;\n            }\n            var sum = 0,\n                part;\n            this.each(function (x, i) {\n                part = x - V[i - 1];\n                sum += part * part;\n            });\n            return Math.sqrt(sum);\n        }\n    }, {\n        key: \"liesOn\",\n        value: function liesOn(line) {\n            return line.contains(this);\n        }\n    }, {\n        key: \"liesIn\",\n        value: function liesIn(plane) {\n            return plane.contains(this);\n        }\n    }, {\n        key: \"rotate\",\n        value: function rotate(t, obj) {\n            var V,\n                R = null,\n                x,\n                y,\n                z;\n            if (t.determinant) {\n                R = t.elements;\n            }\n            switch (this.elements.length) {\n                case 2:\n                    {\n                        V = obj.elements || obj;\n                        if (V.length !== 2) {\n                            return null;\n                        }\n                        if (!R) {\n                            R = _Matrix.Matrix.Rotation(t).elements;\n                        }\n                        x = this.elements[0] - V[0];\n                        y = this.elements[1] - V[1];\n                        return new Vector([V[0] + R[0][0] * x + R[0][1] * y, V[1] + R[1][0] * x + R[1][1] * y]);\n                        break;\n                    }\n                case 3:\n                    {\n                        if (!obj.direction) {\n                            return null;\n                        }\n                        var C = obj.pointClosestTo(this).elements;\n                        if (!R) {\n                            R = _Matrix.Matrix.Rotation(t, obj.direction).elements;\n                        }\n                        x = this.elements[0] - C[0];\n                        y = this.elements[1] - C[1];\n                        z = this.elements[2] - C[2];\n                        return new Vector([C[0] + R[0][0] * x + R[0][1] * y + R[0][2] * z, C[1] + R[1][0] * x + R[1][1] * y + R[1][2] * z, C[2] + R[2][0] * x + R[2][1] * y + R[2][2] * z]);\n                        break;\n                    }\n                default:\n                    {\n                        return null;\n                    }\n            }\n        }\n    }, {\n        key: \"reflectionIn\",\n        value: function reflectionIn(obj) {\n            if (obj.anchor) {\n                // obj is a plane or line\n                var P = this.elements.slice();\n                var C = obj.pointClosestTo(P).elements;\n                return new Vector([C[0] + (C[0] - P[0]), C[1] + (C[1] - P[1]), C[2] + (C[2] - (P[2] || 0))]);\n            } else {\n                // obj is a point\n                var Q = obj.elements || obj;\n                if (this.elements.length !== Q.length) {\n                    return null;\n                }\n                return this.map(function (x, i) {\n                    return Q[i - 1] + (Q[i - 1] - x);\n                });\n            }\n        }\n    }, {\n        key: \"to3D\",\n        value: function to3D() {\n            var V = this.dup();\n            switch (V.elements.length) {\n                case 3:\n                    {\n                        break;\n                    }\n                case 2:\n                    {\n                        V.elements.push(0);\n                        break;\n                    }\n                default:\n                    {\n                        return null;\n                    }\n            }\n            return V;\n        }\n    }, {\n        key: \"inspect\",\n        value: function inspect() {\n            return '[' + this.elements.join(', ') + ']';\n        }\n    }, {\n        key: \"setElements\",\n        value: function setElements(els) {\n            this.elements = (els.elements || els).slice();\n            return this;\n        }\n\n        //From glUtils.js\n\n    }, {\n        key: \"flatten\",\n        value: function flatten() {\n            return this.elements;\n        }\n    }]);\n\n    return Vector;\n}();\n\nVector.Random = function (n) {\n    var elements = [];\n    while (n--) {\n        elements.push(Math.random());\n    }\n    return new Vector(elements);\n};\n\nVector.Zero = function (n) {\n    var elements = [];\n    while (n--) {\n        elements.push(0);\n    }\n    return new Vector(elements);\n};\n\nVector.prototype.x = Vector.prototype.multiply;\nVector.prototype.each = Vector.prototype.forEach;\n\nVector.i = new Vector([1, 0, 0]);\nVector.j = new Vector([0, 1, 0]);\nVector.k = new Vector([0, 0, 1]);\n//# sourceMappingURL=Vector.js.map\n\n\n//# sourceURL=webpack:///./node_modules/sylvester-es6/target/Vector.js?");

/***/ }),

/***/ "./node_modules/sylvester-es6/target/Vertex.js":
/*!*****************************************************!*\
  !*** ./node_modules/sylvester-es6/target/Vertex.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Vertex = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Vector2 = __webpack_require__(/*! ./Vector */ \"./node_modules/sylvester-es6/target/Vector.js\");\n\nvar _PRECISION = __webpack_require__(/*! ./PRECISION */ \"./node_modules/sylvester-es6/target/PRECISION.js\");\n\nvar _Polygon = __webpack_require__(/*! ./Polygon */ \"./node_modules/sylvester-es6/target/Polygon.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Vertex = exports.Vertex = function (_Vector) {\n    _inherits(Vertex, _Vector);\n\n    function Vertex(point) {\n        _classCallCheck(this, Vertex);\n\n        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Vertex).call(this, point));\n\n        _this.setElements(point);\n        if (_this.elements.length === 2) {\n            _this.elements.push(0);\n        }\n        if (_this.elements.length !== 3) {\n            var _ret;\n\n            return _ret = null, _possibleConstructorReturn(_this, _ret);\n        }\n        return _this;\n    }\n\n    // Returns true iff the vertex's internal angle is 0 <= x < 180\n    // in the context of the given polygon object. Returns null if the\n    // vertex does not exist in the polygon.\n\n\n    _createClass(Vertex, [{\n        key: \"isConvex\",\n        value: function isConvex(polygon) {\n            var node = polygon.nodeFor(this);\n            if (node === null) {\n                return null;\n            }\n            var prev = node.prev.data,\n                next = node.next.data;\n            var A = next.subtract(this);\n            var B = prev.subtract(this);\n            var theta = A.angleFrom(B);\n            if (theta <= _PRECISION.PRECISION) {\n                return true;\n            }\n            if (Math.abs(theta - Math.PI) <= _PRECISION.PRECISION) {\n                return false;\n            }\n            return A.cross(B).dot(polygon.plane.normal) > 0;\n        }\n\n        // Returns true iff the vertex's internal angle is 180 <= x < 360\n\n    }, {\n        key: \"isReflex\",\n        value: function isReflex(polygon) {\n            var result = this.isConvex(polygon);\n            return result === null ? null : !result;\n        }\n    }, {\n        key: \"type\",\n        value: function type(polygon) {\n            var result = this.isConvex(polygon);\n            return result === null ? null : result ? 'convex' : 'reflex';\n        }\n    }]);\n\n    return Vertex;\n}(_Vector2.Vector);\n\n// Method for converting a set of arrays/vectors/whatever to a set of Vertex objects\n\n\nVertex.convert = function (points) {\n    var pointSet = points.toArray ? points.toArray() : points;\n    var list = [],\n        n = pointSet.length;\n    for (var i = 0; i < n; i++) {\n        list.push(new Vertex(pointSet[i]));\n    }\n    return list;\n};\n//# sourceMappingURL=Vertex.js.map\n\n\n//# sourceURL=webpack:///./node_modules/sylvester-es6/target/Vertex.js?");

/***/ }),

/***/ "./src/Unmatrix.js":
/*!*************************!*\
  !*** ./src/Unmatrix.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var sylvester_es6__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sylvester-es6 */ \"./node_modules/sylvester-es6/target/Sylvester.js\");\n/* harmony import */ var sylvester_es6__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sylvester_es6__WEBPACK_IMPORTED_MODULE_0__);\n\n\nclass Unmatrix {\n  // Convert radians to degrees\n  rad2deg (rad) {\n    return rad * (180 / Math.PI);\n  }\n\n  // Determinant of a matrix\n  determinant (matrix) {\n    return new sylvester_es6__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"](matrix).determinant();\n  }\n\n  // Inverse of a matrix\n  inverse (matrix) {\n    return new sylvester_es6__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"](matrix).inverse().elements;\n  }\n\n  // Transpose of a matrix\n  transpose (matrix) {\n    return new sylvester_es6__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"](matrix).transpose().elements;\n  }\n\n  // Multiply a point by a matrix and return the transformed point\n  multVecMatrix (point, matrix) {\n    return new sylvester_es6__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"](matrix).multiply(point).elements;\n  }\n\n  // Get the length of a vector\n  length (point) {\n    return new sylvester_es6__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"](point).modulus();\n  }\n\n  // Normalize the length of a point to 1\n  normalize (point) {\n    return new sylvester_es6__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"](point).toUnitVector().elements;\n  }\n\n  // Dot product of two points\n  dot (point1, point2) {\n    return new sylvester_es6__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"](point1).dot(point2);\n  }\n\n  // Cross product of two points\n  cross (point1, point2) {\n    return new sylvester_es6__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"](point1).cross(point2).elements;\n  }\n\n  // TODO: Explain this function\n  combine (a, b, ascl, bscl) {\n    let result = [];\n    result[0] = (ascl * a[0]) + (bscl * b[0]);\n    result[1] = (ascl * a[1]) + (bscl * b[1]);\n    // Both vectors are 3d. Return a 3d vector\n    if (a.length === 3 && b.length === 3) {\n      result[2] = (ascl * a[2]) + (bscl * b[2]);\n    }\n    return result;\n  }\n\n  // Return a transform object if matrix can be decomposed, null if it can't\n  decompose (matrix) {\n    let transform = {};\n\n    // Normalize the matrix\n    if (matrix[3][3] === 0) {\n      return null;\n    }\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        matrix[i][j] /= matrix[3][3];\n      }\n    }\n\n    // perspectiveMatrix is used to solve for perspective, but it also provides\n    // an easy way to test for singularity of the upper 3x3 component\n    let perspectiveMatrix = matrix;\n\n    for (let i = 0; i < 3; i++) {\n      perspectiveMatrix[i][3] = 0;\n    }\n\n    perspectiveMatrix[3][3] = 1;\n\n    if (this.determinant(perspectiveMatrix) === 0) {\n      return null;\n    }\n\n    // First, isolate perspective\n    let perspective;\n    if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {\n      // rightHandSide is the right hand side of the equation\n      let rightHandSide = [];\n      rightHandSide[0] = matrix[0][3];\n      rightHandSide[1] = matrix[1][3];\n      rightHandSide[2] = matrix[2][3];\n      rightHandSide[3] = matrix[3][3];\n\n      // Solve the equation by inverting perspectiveMatrix and multiplying\n      // rightHandSide by the inverse\n      let perspectiveMatrixInverse = this.inverse(perspectiveMatrix);\n      let perspectiveMatrixInverseTranspose = this.transpose(inversePerspectiveMatrix);\n      perspective = this.multVecMatrix(rightHandSide, perspectiveMatrixInverseTranspose);\n\n      // Clear the perspective partition\n      matrix[0][3] = matrix[1][3] = matrix[2][3] = 0;\n      matrix[3][3] = 1;\n    }\n    else {\n      // No perspective\n      perspective = [];\n      perspective[0] = perspective[1] = perspective[2] = 0;\n      perspective[3] = 1;\n    }\n\n    // Next take care of translation\n    let translateX = matrix[3][0];\n    let translateY = matrix[3][1];\n    let translateZ = matrix[3][2];\n\n    // Now get scale and shear\n    // row is a 3 element array of 3 component vectors\n    let row = [[], [], []];\n\n    for (let i = 0; i < 3; i++) {\n      row[i][0] = matrix[i][0];\n      row[i][1] = matrix[i][1];\n      row[i][2] = matrix[i][2];\n    }\n\n    // Compute X scale factor and normalize first row\n    let scaleX = this.length(row[0]);\n    row[0] = this.normalize(row[0]);\n\n    // Compute XY shear factor and make 2nd row orthogonal to 1st\n    let skew = this.dot(row[0], row[1]);\n    row[1] = this.combine(row[1], row[0], 1.0, -skew);\n\n    // Now, compute Y scale and normalize 2nd row\n    let scaleY = this.length(row[1]);\n    row[1] = this.normalize(row[1]);\n    skew /= scaleY;\n\n    // Compute XZ and YZ shears, orthogonalize 3rd row\n    let skewX = this.dot(row[0], row[2]);\n    row[2] = this.combine(row[2], row[0], 1.0, -skewX);\n    let skewY = this.dot(row[1], row[2]);\n    row[2] = this.combine(row[2], row[1], 1.0, -skewY);\n\n    // Next, get Z scale and normalize 3rd row\n    let scaleZ = this.length(row[2]);\n    row[2] = this.normalize(row[2]);\n    skewX /= scaleZ;\n    skewY /= scaleZ;\n\n    // At this point, the matrix (in rows) is orthonormal. Check for a\n    // coordinate system flip. If the determinant is -1, then negate the\n    // matrix and the scaling factors\n    let pdum3 = this.cross(row[1], row[2]);\n    if (this.dot(row[0], pdum3) < 0) {\n      for (let i = 0; i < 3; i++) {\n        scaleX *= -1;\n        row[i][0] *= -1;\n        row[i][1] *= -1;\n        row[i][2] *= -1;\n      }\n    }\n\n    // Get the rotations\n    let rotateY = Math.asin(-row[0][2]);\n    let rotateX, rotateZ;\n    if (Math.cos(transform.rotateY) !== 0) {\n      rotateX = Math.atan2(row[1][2], row[2][2]);\n      rotateZ = Math.atan2(row[0][1], row[0][0]);\n    }\n    else {\n      rotateX = Math.atan2(-row[2][0], row[1][1]);\n      rotateZ = 0;\n    }\n\n    return {\n      perspective: perspective,\n      translateX: translateX,\n      translateY: translateY,\n      translateZ: translateZ,\n      rotate: this.rad2deg(rotateZ),\n      rotateX: this.rad2deg(rotateZ),\n      rotateY: this.rad2deg(rotateY),\n      rotateZ: this.rad2deg(rotateZ),\n      scaleX: scaleX,\n      scaleY: scaleY,\n      scaleZ: scaleZ,\n      skew: this.rad2deg(skew),\n      skewX: this.rad2deg(skewX),\n      skewY: this.rad2deg(skewY)\n    }\n  }\n\n  // Returns an object with transform properties\n  getTransform (element) {\n    // Check if element is an HTML element\n    if (!(element instanceof HTMLElement)) {\n      return null;\n    }\n\n    // Check if element has transforms\n    let computedStyle = getComputedStyle(element);\n    if (!('transform' in computedStyle) || computedStyle.transform === 'none') {\n      return null;\n    }\n\n    let transform = computedStyle.transform;\n    // Check if transform is 3d\n    let is3d = transform.includes('matrix3d');\n\n    // Convert matrix values to an array of floats\n    transform = transform.match(/\\((.+)\\)/)[1];\n    transform = transform.split(',');\n    let t = transform.map(value => parseFloat(value))\n\n    // Convert transform to a matrix. Matrix columns become arrays\n    let matrix = is3d\n      ? [ // Create 4x4 3d matrix\n          [ t[0],  t[1],  t[2],  t[3]  ],\n          [ t[4],  t[5],  t[6],  t[7]  ],\n          [ t[8],  t[9],  t[10], t[11] ],\n          [ t[12], t[13], t[14], t[15] ]\n        ]\n      : [ // Create 4x4 2d matrix\n          [ t[0],  t[1],  0,     0 ],\n          [ t[2],  t[3],  0,     0 ],\n          [ 0,     0,     1,     0 ],\n          [ t[4],  t[5],  0,     1 ]\n        ];\n\n    return this.decompose(matrix);\n  }\n}\n// Export an instance cuz Webpack :(\n/* harmony default export */ __webpack_exports__[\"default\"] = (new Unmatrix());\n\n\n//# sourceURL=webpack:///./src/Unmatrix.js?");

/***/ })

/******/ });